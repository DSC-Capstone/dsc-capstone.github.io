{"0": {
    "doc": "üõ† Methodology Assignment 1",
    "title": "üõ† Methodology Assignment 1",
    "content": "Before attempting this assignment, make sure to read Lesson 1. Submit this assignment to Gradescope by Sunday, October 2nd at 11:59PM. Post questions with the assignment here. Follow the steps below. | On GitHub, create a private repository called DSC180A-Methodology-1. | Using SSH, log into a jumpbox server on DSMLP. Don‚Äôt run a launch script just yet ‚Äì only do that in step 6. | While on the jumpbox server, clone the Git repository you created. Then, change directories into repository (cd DSC180A-Methodology-1). | Run the command uname -a &gt; uname-jumpbox.txt. This saves a snapshot of your server information to a file named uname-jumpbox.txt. | Run echo ~ &gt; homedir.txt. This stores the path to your home directory in a file named homedir.txt. At this point, the DSC180A-Methodology-1 folder should have 2 files in it ‚Äì uname-jumpbox.txt and homedir.txt. | Use a launch script, like launch-scipy-ml.sh, to initialize a container. This will bring you to your home directory once again. | Change directories back into your repository again (cd DSC180A-Methodology-1). Now, run uname -a &gt; uname-container.txt. | Open a Jupyter Notebook using the URL that appeared when you ran the launch script, either through port forwarding or the campus VPN. | Copy the exact URL that appeared when you ran the launch script. Suppose that URL was XXX. Run the command echo XXX &gt; notebook-url.txt. This will create a file named notebook-url.txt with your notebook‚Äôs URL in it. To verify that this worked correctly, run cat notebook-url.txt and you should see your URL. | Commit and push your changes to GitHub. Your repository should have 4 files in it ‚Äì uname-jumpbox.txt, homedir.txt, uname-container.txt, and notebook-url.txt. | Submit the GitHub repository to Gradescope under Methodology Assignment 1. Note: You‚Äôll be able to see your score right when you submit; make sure you receive a full score. | . Note: Here is information on using Git on the command-line. You may have to set up a personal access token, especially if you run into authentication issues. In addition, you can set up SSH keys to avoid having to enter your username and personal access token each time you log into GitHub on DSMLP. ",
    "url": "/assignments/methodology/q1/01/",
    "relUrl": "/assignments/methodology/q1/01/"
  },"1": {
    "doc": "üõ† Methodology Assignment 2",
    "title": "üõ† Methodology Assignment 2",
    "content": "Before attempting this assignment, make sure to read Lesson 2. Submit this assignment to Gradescope by Sunday, October 9th at 11:59PM. Post questions with the assignment here. Your job for this assignment is to create the project structure for your Quarter 1 Project. Do this individually. | Create a private GitHub repository with the directories and files mentioned in the lesson: src/, notebooks/, config/, references/, run.py, .gitignore, and README.md. (It doesn‚Äôt matter what you name your repository, but if you want a name, use DSC180A-Methodology-2.) | Create ‚Äústub files‚Äù in the directories as placeholders as well. Stub files can be empty, but should have the correct extensions. For example, if a directory will inevitably have Python source code, place an empty file in the directory called stub.py. (Note that empty directories won‚Äôt appear on GitHub, so you‚Äôll need to place a stub file in every directory you create.) | Your .gitignore file should have appropriate content. | . You may find this repository useful, as an example. Note that like in Methodology Assignment 1, there are no hidden tests on the Gradescope autograder ‚Äì if you see a 10/10, you‚Äôll receive a full score for this assignment. ",
    "url": "/assignments/methodology/q1/02/",
    "relUrl": "/assignments/methodology/q1/02/"
  },"2": {
    "doc": "üõ† Methodology Assignment 3",
    "title": "üõ† Methodology Assignment 3",
    "content": "Before attempting this assignment, make sure to read Lesson 4 and complete the tasks marked Action Item there. Submit this assignment to Gradescope by Sunday, October 23rd at 11:59PM. Post questions with the assignment here. In this assignment, you‚Äôll: . | Create a Dockerfile with required specifications, building off of the base data science image maintained by UCSD ETS. | Use that Dockerfile to build an image and push it to Docker Hub. | . Follow the steps below. Unless otherwise specified, complete all steps on your personal computer. If you‚Äôre unable to do so, see the last bullet point here. Here‚Äôs a walkthrough video of the assignment, recorded during the lecture help session on Monday, October 17th at 4PM: . | Create a folder, and within it create a file with no extensions named Dockerfile. In it, copy the Dockerfile template from the tutorial from lecture. | Modify the Dockerfile so that: . | aria2, nmap, and traceroute are installed using apt-get | geopandas and babypandas are installed using conda or pip . | There is nothing special about these packages; we just need you to install something! | . | The last line, CMD [\"/bin/bash\"], is uncommented | . | Following the steps in the tutorial linked in lecture, use the Dockerfile you created in Step 2 to create an image (using docker build) and launch a container with that image (using docker run). Make sure that all packages are present. | Note: It may take &gt;10 minutes to create the image for the first time. This is to be expected, because it‚Äôs pulling ~5GB of files. Subsequent pulls will be much faster. | If you aren‚Äôt able to build due to an error with the line RUN apt-get -y install aria2 nmap traceroute, add RUN apt update to your Dockerfile before the aforementioned line. | To verify that packages you installed via apt-get are installed, run which &lt;package-name&gt;, e.g. which nmap (for aria2, use which aria2c). | To verify that packages you installed via conda or pip are installed, open a Python interpreter and try to import them. | . | Push the image to Docker Hub, again using the instructions in the tutorial from above. Make sure your repository is public, so that we can verify it was set up correctly! . | Note: It may take up to 30 minutes for your image to appear on Docker Hub after you run docker push &lt;image&gt;. This is to be expected. | . | After your image appears on Docker Hub, follow the instructions from lecture to launch a container on DSMLP using your image. Test out your environment on DSMLP. Can you start python and import babypandas? . | Submit your assignment to Gradescope by turning in the path to your image on Docker Hub (e.g. sjrampure/test-image:latest) and your Dockerfile. Make sure to include the tag (i.e. :latest). We will pull your image and test whether it meets the requirements stated above. You will not see an autograder score right away, unlike in Methodology Assignments 1 and 2. | . ",
    "url": "/assignments/methodology/q1/03/",
    "relUrl": "/assignments/methodology/q1/03/"
  },"3": {
    "doc": "üõ† Methodology Assignment 4",
    "title": "üõ† Methodology Assignment 4",
    "content": "The goal of this MA is to have you start thinking about your Quarter 2 Project Proposal. But first, you need to be aware of what the proposal entails. Before proceeding, make sure to read the entirety of the Quarter 2 Project Proposal specifications. (That document takes the place of Methodology Lesson 7, too.) . Submit this assignment to Gradescope by Sunday, November 13th at 11:59PM. Post questions with the assignment, and the Quarter 2 Project Proposal more generally, here. Your job for this MA is to write a few sentences on each of the prompts below. You will enter your answers directly on Gradescope. Answer them individually, even though you will work on the actual proposal in groups. | What is the most interesting topic covered in your domain this quarter? | Describe a potential investigation you would like to pursue for the Quarter 2 Project. | What is a potential change you would like to make to the approach taken in your current Quarter 1 Project? | What other techniques/methods would you be interested in using in your project? | . Your mentors will use your answers to these prompts to structure a discussion around possible proposals in Week 8. In Week 8‚Äôs discussion, you should be prepared to share your answers to these prompts with the peers in your section. Note: If you are in a domain where the Quarter 2 Project is already determined, this is still a useful (and mandatory) exercise. Do not just answer with the project you think you are doing; give the questions thought and respond with possible related projects that you could work on if you get to go further than expected with your current project or if your currrent project doesn‚Äôt pan out. All data scientists must have the ability to develop topics of investigation given a dataset and some domain knowledge. ",
    "url": "/assignments/methodology/q1/04/",
    "relUrl": "/assignments/methodology/q1/04/"
  },"4": {
    "doc": "üõ† Methodology Assignment 5",
    "title": "üõ† Methodology Assignment 5",
    "content": "Submit this assignment to Gradescope by Wednesday, November 23rd at 11:59PM (note the later-than-usual deadline). Post questions with the assignment, and the Quarter 1 code submission more generally, here. In this assignment, you will submit a working draft of your Quarter 1 Project‚Äôs code, such that it: . | Uses test data. | Implements the test target. | . Before proceeding, make sure you‚Äôre familiar with Lessons 2 (Project Organization), 5 (Software Development) and 6 (Long-Running Jobs and Test Data). | Suppose &lt;projectdir&gt; is the repository in which your project code is being written. In the folder &lt;projectdir&gt;/test/testdata, create and store test data, according to the principles from Lesson 6. For the purposes of MA 5, you need to create a minimal test data set that your project can take as input and run from start to finish on, without error. Your test data should be in the format that most closely resembles ‚Äúraw‚Äù data that your project may use. For instance, if you use an API to access data, create test data in the same format that is returned by the API. (Remember, test data is not data that results from a train/test split! Review Lesson 6 for the definition.) . | Implement the target test in run.py that runs all your targets on the test data you created. (We know your project isn‚Äôt finished yet; for now, the test target should just build all outputs that you‚Äôve currently implemented.) . | At the root of your project repository, create a submission.json file that follows the conventions in the Code Submission Specifics section of the Quarter 1 Project specifications. The file should have two key-value pairs (yes, including a DockerHub image). | Push your repository to GitHub, and submit it to Gradescope. | . MA 5 will be autograded on Gradescope; you‚Äôll be able to see your score right when you submit. The tests will not depend on your project‚Äôs actual output, just on whether or not it satisfies the guidelines above. Note: As with every methodology assignment, you should work on this individually. You can discuss the requirements with your group, but should create test data and submit the repository separately. Once the assignment is turned in, you can all share your test data. ",
    "url": "/assignments/methodology/q1/05/",
    "relUrl": "/assignments/methodology/q1/05/"
  },"5": {
    "doc": "üíæ Archive",
    "title": "üíæ Archive",
    "content": "Projects from earlier years: . | 2022-2023 | 2021-2022 | 2020-2021 | 2019-2020 | . You may find it easier to look at this Google sheet, which contains links to the course websites of all DSC capstone projects ever, all in one place. ",
    "url": "/archive/",
    "relUrl": "/archive/"
  },"6": {
    "doc": "üíª Command-Line Cheat Sheet",
    "title": "üíª Command-Line Cheat Sheet",
    "content": ". The DSMLP servers use Linux. As such, when interacting with them, all of the command-line commands you use should be Linux-specific (which, for the most part, also work on macOS). Many of the key commands you‚Äôll need to know are summarized below. ",
    "url": "/command-line/",
    "relUrl": "/command-line/"
  },"7": {
    "doc": "üíª Command-Line Cheat Sheet",
    "title": "Basics",
    "content": "| Command | Description | Example | . | man | Shows the manual for a command. This can be helpful for seeing how to run a command or what flags (parameters) a command takes. | man cp shows the manual for the cp (copy) command. | . | pwd | Displays your present working directory. | pwd, when run immediately after opening my Terminal, shows /Users/surajrampure. | . | ls | lists all files in the current directory. | ls ls -a (also shows all of the hidden files and folders in the current directory (like .gitignore)) | . | mkdir | makes a new directory (folder) with the name you specify. | mkdir hello creates a folder in your present working directory named hello. Verify this using ls. | . | cd | changes your current directory to be the one specified. | cd hello enters the directory hello, if it exists in the present working directory. cd by itself always returns you to your ‚Äúhome‚Äù directory. | . | touch | Creates an empty file with the specified name. | touch ucsd.txt creates a file named ucsd.txt in the present working directory. | . | cat | Shows the contents of a file. | cat hello.txt will display all of hello.txt. | . | mv | moves a file to a specified location. | mv ucsd.txt ../hello.txt moves a file from the present working directory to the parent directory. Note: In Linux, . represents the current directory and .. represents the parent directory. | . | cp | copies a file from one location to another. | cp hello.txt ../hey.txt makes a copy of the contents in the file hello.txt and saves it in the file hey.txt, stored in the parent directory of the present working directory. Note: To copy a folder, use the -r flag, which stands for ‚Äúrecursive.‚Äù | . To verify that you‚Äôve synthesized the above information, answer the following questions: . | What does cd .. do? | What does ls ../hello do? | . ",
    "url": "/command-line/#basics",
    "relUrl": "/command-line/#basics"
  },"8": {
    "doc": "üíª Command-Line Cheat Sheet",
    "title": "File Editing",
    "content": "| Command | Description | Example | . | vim | A command line-based text editor. | vim hello.txt opens hello.txt in vim. | . | emacs | Another command line-based text editor. | emacs hello.txt opens hello.txt in emacs. | . ",
    "url": "/command-line/#file-editing",
    "relUrl": "/command-line/#file-editing"
  },"9": {
    "doc": "üíª Command-Line Cheat Sheet",
    "title": "Servers and Networks",
    "content": "| Command | Description | Example | . | ssh | Used to access servers (amongst other things). | ssh srampure@dsmlp-login.ucsd.edu is how Suraj accesses DSMLP. | . | scp / sftp | Allows you to move files between your local machine and a remote server (essentially ssh + cp). | scp dog.txt srampure@dsmlp-login.ucsd.edu:test.txt copies the file dog.txt from your local machine to Suraj‚Äôs DSMLP drive (replace with your own username). See DSMLP documentation for more. | . | wget | Downloads the contents of a webpage. | wget https://raw.githubusercontent.com/ericmichael/cooltxt/master/cool.txt creates a new file called cool.txt with the contents of the aforementioned URL. | . ",
    "url": "/command-line/#servers-and-networks",
    "relUrl": "/command-line/#servers-and-networks"
  },"10": {
    "doc": "üíª Command-Line Cheat Sheet",
    "title": "Other",
    "content": "| Command | Description | . | clear or ctrl + l | Clears the Terminal window. | . | history | Shows the commands you‚Äôve entered in the past. | . | ctrl + r | Allows you to search your command history to easily find a command you entered in the past. | . | screen | Allows you to run tasks in the background. See here for more details. | . | git | See usage reference here. | . | grep | Helps you quickly search text (both individual documents and folders). The general pattern is grep -inr &lt;keyword&gt; &lt;file_path&gt;. For example, grep -inr dog hello.txt will display all lines in which 'dog' occurred in hello.txt. | . | find | Helps you quickly find a file using regex. For example, find &lt;path&gt; -iname &lt;regex&gt;. | . | htop | Shows you all of the processes currently running on your server and the amount of resources (e.g. CPU and memory) that you‚Äôre using. | . (source) If you have any feedback for this page, let us know! . ",
    "url": "/command-line/#other",
    "relUrl": "/command-line/#other"
  },"11": {
    "doc": "Live Sesson ‚Äì Exploratory Data Analysis",
    "title": "Live Sesson ‚Äì Exploratory Data Analysis",
    "content": "In this live session, TA Samanvitha gave a talk on the role of exploratory data analysis in capstone projects. It is particularly useful for determining what should end up in your Quarter 1 Project report. Slides . ",
    "url": "/lessons/q1/extra/eda/",
    "relUrl": "/lessons/q1/extra/eda/"
  },"12": {
    "doc": "Lesson 5 ‚Äì Software Development",
    "title": "Lesson 5 ‚Äì Software Development",
    "content": "All lectures will be delivered as readings that you complete on your own time. Post questions with the lesson here. There is no Methodology Assignment associated with this lesson. However, it builds on the software development principles introduced in Lesson 2, and your final project deliverables will be graded according to how closely they follow these principles. Reminders: . | The Quarter 1 Project Checkpoint is due this Sunday! Your checkpoint code does not need to follow these standards. | Take a look at the new Resources tab of the course website. | . ",
    "url": "/lessons/q1/05/#lesson-5--software-development",
    "relUrl": "/lessons/q1/05/#lesson-5--software-development"
  },"13": {
    "doc": "Lesson 5 ‚Äì Software Development",
    "title": "Table of contents",
    "content": ". | Overview | Build Scripts . | What is a Build Script? | Targets | Features of a Build Script | . | Configuration Files . | Example: Parameterizing a Function | Configuration and Build Scripts | . | Example Projects | . ",
    "url": "/lessons/q1/05/#table-of-contents",
    "relUrl": "/lessons/q1/05/#table-of-contents"
  },"14": {
    "doc": "Lesson 5 ‚Äì Software Development",
    "title": "Overview",
    "content": "Recall, in Lesson 2, we introduced a template for data science projects by Cookie Cutter Data Science: . Project ‚îú‚îÄ‚îÄ .gitignore &lt;- Files to keep out of version control (e.g. data/binaries). ‚îú‚îÄ‚îÄ run.py &lt;- run.py with calls to functions in src. ‚îú‚îÄ‚îÄ README.md &lt;- The top-level README for developers using this project. ‚îú‚îÄ‚îÄ data ‚îÇ ‚îú‚îÄ‚îÄ temp &lt;- Intermediate data that has been transformed. ‚îÇ ‚îú‚îÄ‚îÄ out &lt;- The final, canonical data sets for modeling. ‚îÇ ‚îî‚îÄ‚îÄ raw &lt;- The original, immutable data dump. ‚îú‚îÄ‚îÄ notebooks &lt;- Jupyter notebooks (presentation only). ‚îú‚îÄ‚îÄ references &lt;- Data dictionaries, explanatory materials. ‚îú‚îÄ‚îÄ requirements.txt &lt;- For reproducing the analysis environment, e.g. ‚îÇ generated with `pip freeze &gt; requirements.txt` ‚îú‚îÄ‚îÄ src &lt;- Source code for use in this project. ‚îú‚îÄ‚îÄ data &lt;- Scripts to download or generate data. ‚îÇ ‚îî‚îÄ‚îÄ make_dataset.py ‚îú‚îÄ‚îÄ features &lt;- Scripts to turn raw data into features for modeling. ‚îÇ ‚îî‚îÄ‚îÄ build_features.py ‚îú‚îÄ‚îÄ models &lt;- Scripts to train models and make predictions. ‚îÇ ‚îú‚îÄ‚îÄ predict_model.py ‚îÇ ‚îî‚îÄ‚îÄ train_model.py ‚îî‚îÄ‚îÄ visualization &lt;- Scripts to create exploratory and results-oriented viz. ‚îî‚îÄ‚îÄ visualize.py . This template was chosen out of a need to develop data science projects that are: . | Flexibly written, to adapt to changing questions. | Clearly documented, so that is clear ‚Äì both to you and others using your code ‚Äì what each piece does. | Reproducible, meaning that others should be able to run it themselves. | . While working on a project, your primary goal is to conduct a data-driven exploration of some problem, either using existing methods or new methods that are developed as part of your project. However, once your project is complete, it will still live on: . | If you structured your code well, bits and pieces of it can be extracted for other tasks that involve similar datasets, e.g. your ETL logic for data acquisition and cleaning. | Your modeling code can be used to deploy models in production. | More generally, your analysis will be used for decision-making. | . In fact, when working on your project, it may be reasonable to create a separate repository for ‚Äúgeneral use libraries‚Äù that you develop, and import those libraries into your main project. That way, others can more easily adopt the general code that you‚Äôve produced. Let‚Äôs look at some examples of projects and their artifacts. | Project | Primary Output | Usage | Other Artifacts | . | Develop and train a recommender system. | A trained model. | The trained model (output) is executed on a website to give recommendations.The model architecture code may become its own general purpose library, particularly if you built something novel. (These will live in different repositories.) | A data analysis section that evaluates the model, to justify the project‚Äôs worth. If you are in a methods-focused domain, you must do this!A reproducible build, which automates updates to the model (e.g. with new training data). | . | Develop tools to measure engagement on websites. | A set of Javascript functions. | The Javascript functions developed will be run on a website to track and analyze user behavior. | A data analysis section that shows why these functions and features were chosen. | . | Determine how many people to hire at a company. | A report with recommendations on how many people to hire. | Analyses are collected into a report for decision-making about business. | A data analysis section that demonstrates how you arrived at your recommendations.A reproducible build, for those who want to re-run your analysis (e.g. with new training data). | . For others to be able to use your project in the future, it needs be: . | Easily buildable: It should be easy for someone else to load your Docker image, git clone your repo, and run your code. | If it‚Äôs a hassle to get your project running, then others are unlikely to use it. | . | Flexible: It should be easy for someone else to re-use large pieces of your project while changing just the details that are necessary for their use case. | . In the remainder of the lesson, we will look closely at two project components ‚Äì build scripts and configuration files ‚Äì that address the above two requirements directly. ",
    "url": "/lessons/q1/05/#overview",
    "relUrl": "/lessons/q1/05/#overview"
  },"15": {
    "doc": "Lesson 5 ‚Äì Software Development",
    "title": "Build Scripts",
    "content": "What is a Build Script? . As mentioned above, it‚Äôs desirable for your project to be easy to run ‚Äì ideally, future users can run run project in their Terminal and see the output of your work. That‚Äôs precisely what build scripts enable! . Specifically, a build script runs the code in a project to ‚Äúbuild‚Äù desired output. A build script does not contain the implementation details of a project ‚Äì that belongs in library code. Instead, a build script calls library code, and thus should not be very complicated. Build scripts are important for ensuring that your work is reproducible, as all science should be. While they are still not very common in data science projects, build scripts have been around for decades in other contexts. Examples include: . | Makefiles, which are used to coordinate the compilation of C/C++ code and, more generally, to run general Bash (Terminal) commands. | These are extremely powerful for projects that involve multiple languages. You can use them in your data science projects too! | . | Ant, Maven, and Gradle, which all coordinate the building of Java projects. | setup.py files in Python packages, which are used to install packages on others‚Äô systems. For instance, see the setup.py file for pandas here. | While not ‚Äúbuild scripts‚Äù, workflow managers like Luigi and Airflow are similar in spirit, in that they allow you to build pipelines that ‚Äúmove data from point A to point B quickly‚Äù (source). | . To keep things simple, you will create a barebones build script from scratch, called run.py. Note that you can do this even if your project doesn‚Äôt involve Python code; within your Python build script, you can import the os and sys libraries to call other Bash commands. If you‚Äôd like, you can write a build script in another language, e.g. run.R for R projects, or run.sh in Bash. Targets . A target specifies what to build. Specifically, a target is a string describing the desired output, and targets are used when calling build scripts from the Terminal. You should create targets for all major ‚Äústeps‚Äù in your project pipeline, particular for steps that it would make sense to run in isolation of other steps. For instance: . | You may have a target called data that prepares the data for your project by downloading data and running your ETL code. To use this target, users would run python run.py data in the Terminal. | You may also have a target called features that builds the features for your project, from the already-processed data. To use this target, users would run python run.py features in the Terminal. | . As a reminder, in Lesson 2, we looked at how to use command-line arguments in Python. Above, we kept referring to ‚Äúusers‚Äù, i.e. people using your project after you‚Äôve finished building it. However, build scripts also make your life easier while working on your project. Here‚Äôs an example workflow: . | Write ETL logic in src/etl.py. | Import etl in run.py. Create a target called data that, when run via python run.py data, calls the relevant functions in etl to ‚Äúbuild‚Äù the data. | Work in notebooks to develop features, and, once no longer experimental, transfer feature creation code to src/features.py. | As we looked at in Lesson 2, notebooks are for experimenting and presenting, not for storing library code (e.g. functions) that you‚Äôll use repeatedly. | . | Add a feature creation call to run.py under the target features, so python run.py features ‚Äúbuilds‚Äù the features in your project. | This should be done without rebuilding the data, if possible! | . | . By following this workflow, it‚Äôll make it easy to update different parts of your project when, say, your datasets change. While the intermediate target names, like features and data, are up to you, there are a few standard target names that are almost always implemented: . | all runs all targets from scratch (python run.py all). | test runs all targets on test data (python run.py test). | More on test data in Lesson 6. | . | clean deletes all built files, so that you can build your project from scratch (python run.py clean). | It reverts to a clean repository. | . | . Features of a Build Script . As a bare minimum, build scripts must piece together library code to create the output for your project. But, ideally, build scripts: . | (basic) Define targets that both clarify the overarching logic of the project and build intermediate states of the project (for debugging and for users who want to adapt your project from the middle). | (intermediate) Do not do unnecessary intermediate computation. | If steps 1, 2, 3, ‚Ä¶, $k$ have already been completed and saved to files, then start at step $k+1$. | . | (advanced) Run tasks in parallel, when possible. | Makefiles do this! | . | . For further reading: . | Using argparse instead of sys.argv to manage targets. | Makefiles for Data Science: bost.ocks.org/mike/make, zmjones.com/make. | . ",
    "url": "/lessons/q1/05/#build-scripts",
    "relUrl": "/lessons/q1/05/#build-scripts"
  },"16": {
    "doc": "Lesson 5 ‚Äì Software Development",
    "title": "Configuration Files",
    "content": "So far, we‚Äôve established that build scripts lay out the ‚Äúbig picture‚Äù logic of a project, and that library code contains implementation details. If the implementation details of your project are likely to change, then it‚Äôs rather inconvenient to have to go and repeatedly change library code. Instead, as introduced in Lesson 2, you should: . | Parameterize the details that are likely to change ‚Äì i.e., make them inputs to your library functions, rather than hard-coded in the bodies of functions. | Save the inputs that you‚Äôd like to call your functions on in configuration files. | Read configuration files in build scripts to quickly change the input. | . There‚Äôs no exact science to determining what is ‚Äúconfiguration‚Äù (detail) and what is ‚Äúcode‚Äù (logic), since it depends on the context of your project. The overarching question to ask, though, is is this value likely to change as the project evolves? If so, it belongs in configuration. Example: Parameterizing a Function . Below, we provide an example of how we might take code that doesn‚Äôt involve configuration and generalize it. The example is similar, though not quite the same, as the one introduced in Lesson 2. Hopefully, it gets you to think about what role configuration files will play in your project. def get_data(): data = pd.read_csv('data/raw/salaries_us_2012_2022.csv') data = (data .loc[df['year'] == 2015] .loc[df['state'] == 'CA]) . The function above takes in no inputs, and quite a few pieces are hard-coded. Could some of these pieces change? . | File path ('data/raw/salaries_us_2012_2022.csv'): Is it likely that you‚Äôll receive new data and want to run your code on that new data at some point? If so, then perhaps the file path should be stored in a configuration file. Then, when the path to your data changes, all you need to change is the configuration file! | Year (2015): Is your project specific to 2015, or may you want to expand the timeframe that you‚Äôre interested in? If so, you may want to store a list of years in a configuration file. | State: Is something about your project specific to California (for instance, are the datasets all California-specific)? If not, you may want to store the state(s) that you‚Äôre interested in in a configuration file. | . What is unlikely to change is the structure of the code itself ‚Äì in this case, you will always need to load in a dataset as a DataFrame and query for only the years and states that are relevant. This logic certainly belongs in a Python file. A parameterized version of the function above may look like this: . def get_data(fp, years, states): data = pd.read_csv(fp) data = (data .loc[df['year'].isin(years)] .loc[df['loc'].isin(states)]) return data . Configuration and Build Scripts . Let‚Äôs tie everything together, in the context of the previous example. Where should everything live? . | src/etl.py | config/etl.json | run.py | def get_data(fp, years, states): .... return data . | { \"fp\": \"data/raw\", \"years\": [2020, 2021, 2022], \"states\": [\"CA\"] } . | ... config = json.loads(open(...)) get_data(**config) . | . This structure has several advantages: . | It it easy to track your ‚Äúexperiments‚Äù ‚Äì you can create multiple config files, each of which corresponds to a different experiment. | Here, you might make 5 config files, each of which corresponds to a different set of years and states. | . | It makes it easy to change the scope of your project, as all that needs to change are the inputs, not the code itself. | It makes it clear to others what the main variables in your project are. | . As a reminder, you should try and have the names of the keys in your configuration JSON files match the parameter names of your functions. This will allow you to use dictionary unpacking when calling your functions. Also, as you‚Äôll see in the examples below, it‚Äôs typical to have multiple configuration files, each of which corresponds to a different stage of your project. ",
    "url": "/lessons/q1/05/#configuration-files",
    "relUrl": "/lessons/q1/05/#configuration-files"
  },"17": {
    "doc": "Lesson 5 ‚Äì Software Development",
    "title": "Example Projects",
    "content": "This repository contains several example data science projects of different flavors; each project is stored in a different branch. You can use these templates to structure your projects. ",
    "url": "/lessons/q1/05/#example-projects",
    "relUrl": "/lessons/q1/05/#example-projects"
  },"18": {
    "doc": "Lesson 5 ‚Äì Software Development",
    "title": "Lesson 5 ‚Äì Software Development",
    "content": " ",
    "url": "/lessons/q1/05/",
    "relUrl": "/lessons/q1/05/"
  },"19": {
    "doc": "Lesson 1 ‚Äì Servers",
    "title": "Lesson 1 ‚Äì Servers",
    "content": "All lectures will be delivered as readings that you complete on your own time. Post questions with the lesson here. Make sure to read this article before moving on to Methodology Assignment 1. ",
    "url": "/lessons/q1/01/",
    "relUrl": "/lessons/q1/01/"
  },"20": {
    "doc": "Lesson 1 ‚Äì Servers",
    "title": "Table of contents",
    "content": ". | Local Development vs. Remote Development . | Introduction | Example | Guidelines | . | Using the Campus Cluster . | DataHub and DSMLP | Accessing DSMLP | Jupyter Notebooks and DSMLP | Aside: SSH keys | . | Video | . ",
    "url": "/lessons/q1/01/#table-of-contents",
    "relUrl": "/lessons/q1/01/#table-of-contents"
  },"21": {
    "doc": "Lesson 1 ‚Äì Servers",
    "title": "Local Development vs. Remote Development",
    "content": "Introduction . In your coursework so far, the majority of the projects you‚Äôve worked on were likely small enough in scale that you were able to run them entirely locally, i.e. on your personal computer. However, as your projects grow in scale and complexity, and your datasets grow in size, you will need to start resorting to more powerful servers to perform your computation. You will access servers remotely through your personal computer. Servers are great, as they give you access to RAM, CPU, and GPU resources that far exceed those of your personal computer. In addition, it‚Äôs possible to let your code run on a server for days or weeks if necessary, which would be wildly inconvenient to do on your personal computer (imagine not letting your laptop go to sleep for a whole week üò¥). However, just because you have access to a server doesn‚Äôt mean you won‚Äôt need to write or run anything on your personal computer. After all, it‚Äôs far more convenient to run code on your personal computer than it is on a server, in part because your personal computer likely already has all of the packages it needs to run your project. So then, when should you run code on your personal computer vs. on a server? . Example . Let‚Äôs suppose you need to train a model on 1 TB of training data. On the server, it will take ~24 hours to run (it would be impossible to train this model on your personal computer ‚Äì it would take far too long.) How do you go about training your model? . Here‚Äôs one solution: . | Get access to a large, expensive, remote GPU cluster and run train.py on it. | A day later, notice a bug in train.py, meaning all outputs are invalid. (This will happen to you!) | Re-run train.py. | Repeat steps 2 and 3 until you‚Äôre satisfied. By the time your code works as intended, weeks will have passed and many dollars will have been spent on computing resources. | . It is easy to fall into the trap of following the steps above. In fact, the same scenario can occur when working with a large dataset locally ‚Äì you‚Äôve likely re-run a piece of code locally several times and waited minutes for each run, tweaking small things after each run. There‚Äôs a better solution: . | Develop your code locally on a small, representative set of your training data (for instance, a sample of 10,000 rows). | Once you‚Äôre content with your code, push it to GitHub from your personal computer, and pull it on the GPU cluster. | Run train.py once on the GPU cluster and be happy with the results! | . Moral of the story: don‚Äôt run under-tested code in production. Guidelines . In order to run your code both on your personal computer and on a server, here are a few things you‚Äôll need to keep in mind: . | Your code needs to stay up-to-date in both places. As such, make frequent commits when developing your code on your personal computer. | Remote servers typically don‚Äôt have graphical user interfaces, so you‚Äôll need to use the command-line (bash), both generally and to interface with GitHub, since GitHub Desktop typically won‚Äôt be available. (Note that the server that we will use does provide access to Jupyter Notebooks and VS Code, as we will see shortly.) | Your code needs to be able to run on both your personal computer and on the server. This means that you need to have the same versions of programming languages and packages in both places, i.e. that your methods need to be reproducible. Docker is a tool that will use in a few weeks to solve this issue. | . ",
    "url": "/lessons/q1/01/#local-development-vs-remote-development",
    "relUrl": "/lessons/q1/01/#local-development-vs-remote-development"
  },"22": {
    "doc": "Lesson 1 ‚Äì Servers",
    "title": "Using the Campus Cluster",
    "content": "DataHub and DSMLP . You‚Äôve already used a remote server in your data science classes before ‚Äì DataHub! DataHub is a campus-hosted server that allows you to run Jupyter Notebooks. In fact, DataHub also allows you to use JupyterLab, a full-fledged IDE that contains a Terminal, a Python console, and a text editor, among other things. (Since there‚Äôs a Terminal, you can use Git to access your work.) . However, DataHub shuts down after 30 minutes of client inactivity, which makes it impossible to run jobs that require hours to run. In addition, most DataHub configurations only have a small amount of RAM and CPU resources, which won‚Äôt be sufficient for our purposes. As such, we will not be using DataHub! . Instead, we will be using UCSD‚Äôs Data Science and Machine Learning Platform (DSMLP). It turns out that DataHub is run on DSMLP, so in some sense you‚Äôve already used it. However, you access DSMLP via the command-line, e.g. the Terminal. In the next section, we‚Äôll look at exactly how to do so. One of the advantages of learning how to work with DSMLP now is that many of the skills you gain will easily translate to other cloud computing services, like AWS, GCP, and Azure. To be precise, DSMLP is a Kubernetes cluster on which you can run processes in Docker containers; a Docker container is a package that contains everything needed to run an application (e.g. specific code, tools, and libraries), and Kubernetes is a tool that ‚Äúorchestrates‚Äù containers, making sure each one has access to the resources it needs. We‚Äôll learn more about both of these tools in the coming weeks. Accessing DSMLP . Here, we will cover the basics of accessing DSMLP. For more advanced usage, see campus documentation, which is very detailed, as well as the Resources tab of the course website. | Step 1: Open your Terminal and run ssh &lt;username&gt;@dsmlp-login.ucsd.edu, where &lt;username&gt; is replaced with your official UCSD username. For instance, Suraj would run ssh srampure@dsmlp-login.ucsd.edu. Enter your password when prompted. | . If you did this correctly, you will likely see a message that‚Äôs something along the lines of . Hello srampure, you are currently logged into dsmlp-login.ucsd.edu You are using 0% CPU on this system . Now, you‚Äôve been placed into an initial ‚Äújumpbox‚Äù server. Think of this initial server as the lobby of a hotel ‚Äì you could sleep here, but you probably want an actual room, i.e. an actual server. To specify which actual server we want to use, we need to run a launch script. | There are several default launch scripts that exist, that initialize pre-configured servers with common tools pre-installed (like pandas and Jupyter Notebooks). When using a default launch script, there will always be some default amount of RAM, CPU, and GPU resources allocated, but you can provide flags when running the launch script to change these. | You can also create a custom launch script to initialize a custom environment with your own packages. We will see how to do this later. | . | Step 2: Now, in the same Terminal window enter launch-scipy-ml.sh. | . This will initialize a server with 2 CPUs, 8 GB of RAM, and no GPUS, which are the default settings for this launch script. If we instead wanted to ask for 8 CPUs and 32 GB of RAM, we could have run launch-scipy-ml.sh -c 8 -m 32. This is not the only script that exists; for instance, we could have run launch-scipy-ml-gpu.sh. See this page for more details. Once you‚Äôve run the launch script, you now have access to a computer with the resources mentioned above! Note that the server runs Linux, so all of the command-line commands you use should work on Linux (not necessarily Windows or macOS). See the Command-Line Cheat Sheet for more tips. Note: Both the initial jumpbox server and the server you launched have access to the same file system. If you‚Äôre curious, run ls in the Terminal before launching the full server and after, and you‚Äôll see the same set of files. Jupyter Notebooks and DSMLP . After running the launch script, you should see a link to a Jupyter Notebook at the very bottom of your Terminal window. For instance: . You may access your Jupyter notebook at: http://dsmlp-login.ucsd.edu:12733/user/srampure/?token=ce5cfea8c9a8892593868b91ddc55b21ff61220989eb17d6ee303c6604609009 . If you copy the link that you see in your Terminal and try to open it in your web browser, you will likely get an error. To access this Jupyter Notebook, you need to follow one of the following two options. Option 1: Port Forwarding (recommended) . Let‚Äôs take a closer look at the example link provided above. http://dsmlp-login.ucsd.edu:12733/user/srampure/?token=ce5cfea8c9a8892593868b91ddc55b21ff61220989eb17d6ee303c6604609009 . Here, there are two components: . | A port, 12733 in this case, which appears right after dsmlp-login.ucsd.edu: (your port may be different). | A token, ce5cfea8c9a8892593868b91ddc55b21ff61220989eb17d6ee303c6604609009 in this case (your token will be different). | . Now, open a new Terminal window on your personal computer, without closing the old one. This step is crucial ‚Äì make sure that the name at the start of your command prompt is your personal computer‚Äôs name, not your username on the server. In that new Terminal window: . | Enter the command ssh -N -L 8889:127.0.0.1:&lt;port&gt; &lt;user&gt;@dsmlp-login.ucsd.edu. | For instance, Suraj might enter ssh -N -L 8889:127.0.0.1:12733 srampure@dsmlp-login.ucsd.edu. | . | After entering your password, if you see nothing, you‚Äôre on the right track. Open http://localhost:8889/user/&lt;username&gt;/tree/ on your personal computer, again with &lt;username&gt; replaced with your own username (say, srampure) When prompted for a ‚ÄúPassword or token‚Äù, enter the token you just found. You should then be good to go! . | If you change tree to lab in the URL, you‚Äôll be brought to Jupyter Lab, the latest version of the Jupyter Notebooks interface. Jupyter Lab is an IDE, complete with a Terminal and text editor. | If you see an error message saying channel 2: open failed: connect failed: Connection refused, you are likely entering the wrong port number or the same port is being used elsewhere on your computer, like in another Terminal window. | . | To disconnect: . | Stop your Jupyter instance, by either hitting the Quit button in the top-right corner of the Jupyter home page or entering exit in the Terminal used to launch the container. | Switch to the Terminal that is open on your personal computer (the one where you ran ssh -N -L ...) and hit Ctrl+C on your keyboard (regardless of your operating system) to kill the port-forwarding process. | . | . Option 2: Using the Campus VPN . If you choose to go this route, follow the instructions here. Note that there are two versions of the UCSD VPN ‚Äì one that works just in the web browser and one that works for your entire OS. Use the latter, since you‚Äôll be working in the Terminal. (If you have an Apple Silicon Mac, you can follow the Mac instructions listed there, even though they say they‚Äôre for Intel Macs only.) . Aside: SSH keys . SSH keys allow you to skip the step of entering a password each time you‚Äôre accessing DSMLP. Follow the steps here to set them up. This only takes 2 minutes, but saves a ton of time, especially if your UCSD password is something long and cryptic. ",
    "url": "/lessons/q1/01/#using-the-campus-cluster",
    "relUrl": "/lessons/q1/01/#using-the-campus-cluster"
  },"23": {
    "doc": "Lesson 1 ‚Äì Servers",
    "title": "Video",
    "content": "The following video walks through several of the steps mentioned above. It‚Äôs not a substitute for reading the rest of the lesson! . ",
    "url": "/lessons/q1/01/#video",
    "relUrl": "/lessons/q1/01/#video"
  },"24": {
    "doc": "Lesson 6 ‚Äì Long-Running Jobs",
    "title": "Lesson 6 ‚Äì Long-Running Jobs",
    "content": "All lectures will be delivered as readings that you complete on your own time. Post questions with the lesson here. There is no Methodology Assignment associated with this lesson. However, the lesson describes some required aspects of the Quarter 1 Project code, such as test data. ",
    "url": "/lessons/q1/06/#lesson-6--long-running-jobs",
    "relUrl": "/lessons/q1/06/#lesson-6--long-running-jobs"
  },"25": {
    "doc": "Lesson 6 ‚Äì Long-Running Jobs",
    "title": "Table of contents",
    "content": ". | Remote Job Submission . | Overview | DSMLP and Kubernetes | üé• Running Jobs on Background Pods | . | Test Data . | Overview | Using Test Data | . | Logging | . ",
    "url": "/lessons/q1/06/#table-of-contents",
    "relUrl": "/lessons/q1/06/#table-of-contents"
  },"26": {
    "doc": "Lesson 6 ‚Äì Long-Running Jobs",
    "title": "Remote Job Submission",
    "content": "Overview . Picture this: You‚Äôre in a Jupyter Notebook, and hit SHIFT+ENTER to run a cell. That cell takes minutes, if not hours, to run. Since you can‚Äôt do anything else in your notebook until the [*] symbol vanishes, you use this as an excuse to waste time on TikTok or Reddit. You‚Äôve likely experienced this before ‚Äì I know I have. In the traditional computing context, it was compiling that took a long time. In your case, it's likely model training. (source) The reality is, human time is worth a lot more than compute time. While we can only work for so many hours a day, servers (like DSMLP) can run 24/7. Here, we‚Äôll learn how to initiate jobs that run for hours, or even days, on DSMLP. In order to do this, we need: . | A server that can run even after we log out. As we‚Äôll see, we can make DSMLP behave this way. Note that vanilla DataHub doesn‚Äôt work this way ‚Äì after 20 minutes of inactivity, DataHub disconnects you. | Code that doesn‚Äôt require human interaction. | The job is going to run for minutes or hours without any intervention ‚Äì we need to be able to run a single command, e.g. a build script, that runs our entire workflow. | . | Code that is largely correct. | We don‚Äôt want to wait hours before figuring out that our code is incorrect! As we‚Äôll see in the Test Data section, there are best practices to follow here. | . | Good logging. | Debugging is more difficult ‚Äì the outputs of print statements won‚Äôt be captured. In the Logging section, we‚Äôll discuss this further. | . | . DSMLP and Kubernetes . Over the last few weeks, we‚Äôve learned how to launch servers on DSMLP with custom compute resources (amount of CPUs, GPUs, and RAM) and Docker images. It turns out that DSMLP is a Kubernetes cluster. Kubernetes is a platform that manages, or orchestrates, containerized workloads. Recall from Lesson 4 that each server on DSMLP is a Docker container; Kubernetes is the system that manages which containers receive which resources on DSMLP. Fun fact: Per the documentation, Kubernetes is often shortened to ‚ÄúK8S‚Äù because there are 8 letters between the K and s in Kubernetes. When we run a launch script on DSMLP, we are requesting a Kubernetes pod. While not entirely accurate, it‚Äôs simplest to think of a pod as another term for a container (this is not fully accurate because pods can consist of multiple containers). The reason this context is relevant is because we need to interact with the underlying Kubernetes infrastructure in order to initiate a long-running job in a pod. While on the DSMLP jumpbox server, there are two Kubernetes-related command-line tools to know about: . | kubectl, which stands for ‚ÄúKubernetes control‚Äù, allows us to list and delete pods associated with the current user. (Not sure how it‚Äôs pronounced? Neither are the enthusiasts.) | kubesh, which stands for ‚ÄúKubernetes shell‚Äù, allows us to connect to the shell (command-line) in a specified pod. | . To launch a background pod ‚Äì that is, a pod in which we will initiate a long-running job ‚Äì we use the -b flag when running a launch script. For instance, we may run launch-scipy-ml -g 1 -c 4 -i srampure/lesson6:latest -b to create a background-enabled pod with 1 GPU and 4 CPU cores, that has the Docker image srampure/lesson6:latest instantiated. When using the -b flag, notice that we are not put into the pod that we requested ‚Äì instead, the pod is simply created. Note that the hostname is still [srampure@dsmlp-login]! The resulting output contains the pod ID ‚Äì srampure-20515 in this case ‚Äì which we‚Äôll need to remember in order to interact with the pod. In order to actually enter the pod, we can run kubesh &lt;pod-id&gt;, e.g. kubesh srampure-20515. Once we enter the pod, everything will appear as though we just ran our launch script without the -b flag. However, there‚Äôs a difference ‚Äì when we exit our pod (by either typing exit or hitting CONTROL+D), any processes we initiated will keep running! . üé• Running Jobs on Background Pods . For a walkthrough on how to initiate long-running jobs, watch the following walkthrough video. As a summary: . | kubesh &lt;pod-id&gt; launches a pod. | kubectl get pods lists all pods. | kubectl delete pod &lt;pod-id&gt; deletes a pod. | Adding the &amp; after a call to python in the command-line, e.g. python run.py test data &amp;, runs your Python process in the background without taking over the command prompt. | ps lists all of the current processes and their IDs. | kill &lt;process-id&gt; kills a process. | . | . Note: The default timeout, according to the DSMLP documentation, is 6 hours (not 3, as mentioned in the video). If you need to need a pod to run for up to 12 hours, you can specify this by writing a custom launch script; see here for instructions on how to do so (you may also want to do this if you‚Äôve gotten annoyed of writing out several flags each time you want to launch a pod). If you need a pod to run for more than 12 hours, contact datahub@ucsd.edu and mention that it‚Äôs for DSC 180A. Now that we know how to initiate long-running jobs, let‚Äôs look at best practices for doing so. ",
    "url": "/lessons/q1/06/#remote-job-submission",
    "relUrl": "/lessons/q1/06/#remote-job-submission"
  },"27": {
    "doc": "Lesson 6 ‚Äì Long-Running Jobs",
    "title": "Test Data",
    "content": "Overview . It would be a massive waste of time and resources to kick off a long-running job that runs for a few hours before terminating because of a bug in our code. In order to detect such bugs, we will create and run our code on test data. Test data is small, made-up data that is realistic enough to test the behavior of our code. | It is not a sample of real data ‚Äì it should be created by the developer. | It is designed to test the correctness of code. | Developers should design each line/component of the test data to test different aspects of their code. | . Warning In this context, test data is created for unit tests, not data that results from a train/test split! . Test data should only be a few lines long. You should be able to verify that your code works correctly on test data by hand. For instance, suppose your code takes in a dataset, uses sklearn.preprocessing.PolynomialFeatures to create a quadratic feature, and trains a regression model of the form \\(H(x) = w_0 + w_1 x + w_2 x^2\\). A possible test dataset might be . x,y -2,1 2,9 3,16 . By hand, we can verify that the three points above satisfy \\(y = (1 + x)^2 = 1 + 2x + x^2\\), so as a ‚Äútest case‚Äù we can expect that our code outputs \\(w_0 = 1, w_1 = 2, w_2 = 1\\) (with a loss of 0). Note that since test data is synthetic, the resulting trained models will be meaningless. For instance, the weights \\(w_0 = 1, w_1 = 2, w_2 = 1\\) mean nothing if our regression model aims to model car acceleration as a function of horsepower. This is expected ‚Äì the sole purpose of test data is to ensure that code works correctly. Using Test Data . Run your project using test data until you can verify that your code and outputs are correct. Once you‚Äôve done so, then you can initiate a long-running job on real data, with the piece of mind that it should run correctly. (As an intermediate step you may also elect to run your code on a sample of the full dataset, but remember, the test data is not merely a sample). Recall, in Lesson 5, we introduced the idea of targets. A target specifies what to build. Specifically, a target is a string describing the desired output, and targets are used when calling build scripts from the Terminal. You‚Äôre encouraged to implement a test-data target, that runs the same code as the data target, but only on your test data. To train a model on your test data, you may run your build script with test-data as one of your many targets: . python run.py test-data features model . For instance, the above call to run.py should featurize test data and use that featurized data to train a model. While you‚Äôre encouraged to implement a test-data target, you‚Äôre required to implement a test target, both for your Quarter 1 Project and for your Quarter 2 Project. The test target should behave the same as the all target discussed in Lesson 5, just on your test data ‚Äì that is, it should build your entire project from scratch, using test data. We will use your test target to grade your project code in both quarters. Here are the specific commands we‚Äôll run on our personal DSMLP containers to grade your work: . | launch-scipy-ml.sh -i &lt;your-docker-repo&gt; | git clone &lt;your-github-repo&gt;* | python run.py test | &lt;script that checks generated files&gt; | . *While your Quarter 2 Project repo is required to be public, your Quarter 1 Project repo can be private. As such, if your code is not accessible on GitHub, we‚Äôll download it directly from Gradescope. This means that we (methodology staff) don‚Äôt need access to your ‚Äúreal‚Äù data in order to evaluate your project. While your reports and deliverables will be a result of real data, your submitted code will not include it. As mentioned in Lesson 2, your actual data should never included in Git/version control, since it does not change. However, since test data is created by the developer and may change as the project evolves, it should be included in version control. For instance, you may place it in the test/testdata/ directory. ",
    "url": "/lessons/q1/06/#test-data",
    "relUrl": "/lessons/q1/06/#test-data"
  },"28": {
    "doc": "Lesson 6 ‚Äì Long-Running Jobs",
    "title": "Logging",
    "content": "When we initiate long-running jobs that run in the background, we don‚Äôt typically have access to the command-line outputs (e.g. print statements) of our code. As such, it can be particularly difficult to debug when and why something went wrong. In this setting, the cost of trial-and-error is high, since each ‚Äútrial‚Äù takes a long time to run. The solution is to save logs to a file that you can inspect afterwards. The most rudimentary way to do this, if you‚Äôre already using ‚Äúprint debugging‚Äù, is to use the &gt; keyword when calling python from the command-line. For instance, . python run.py all &gt; log.txt &amp; . will run run.py in the background (&amp;), with the test target, and will save all outputs (e.g. results of print statements, warnings, and error messages) to log.txt. While this works, it can be difficult to determine where in the project each line in log.txt came from. A better solution is to use the built-in logging module. It automatically records a timestamp each time it is called, along with which file and function the logging occurred in. You can customize the granularity and frequency of the logs to match your use case. We won‚Äôt cover the details of the logging module here; instead, we‚Äôll point you to this tutorial by realpython.com. However, here is an example of how the module works: . # randdiv.py import logging import numpy as np logging.basicConfig(filename='log.txt', filemode='a', level=logging.INFO, datefmt='%H:%M:%S', format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s') def myfunc(): a = np.random.randint(-5, 5) b = np.random.randint(-5, 5) if b == 0: logging.info('zerodivisionerror preempted') else: return a / b print([myfunc() for _ in range(100)]) . Upon running python randdiv.py, log.txt might contain: . 2022-10-30 23:37:11,815,815 root INFO zerodivisionerror preempted . This tells us when (October 30th at 11:37:11PM) and where (randdiv.py, the root-level file in this case) each call to logging.info occurred. ",
    "url": "/lessons/q1/06/#logging",
    "relUrl": "/lessons/q1/06/#logging"
  },"29": {
    "doc": "Lesson 6 ‚Äì Long-Running Jobs",
    "title": "Lesson 6 ‚Äì Long-Running Jobs",
    "content": " ",
    "url": "/lessons/q1/06/",
    "relUrl": "/lessons/q1/06/"
  },"30": {
    "doc": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "title": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "content": "On February 12th ‚Äì in just three weeks ‚Äì you‚Äôll be required to submit checkpoints for your report and code. This article will cover best practices that will apply to all of your deliverables this quarter, but primarily your report. In the coming weeks, we‚Äôll look more closely at how to produce scientific posters and static websites. ",
    "url": "/lessons/q2/03/",
    "relUrl": "/lessons/q2/03/"
  },"31": {
    "doc": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "title": "Table of contents",
    "content": ". | Overview | Principles | Knowing Your Audience | Providing Context | Examples and Exercises . | Exercise 1: Finding Exemplars | Exercise 2: Communicate Thorugh Specificity | Exercise 3: Write Your Results Now! | . | . ",
    "url": "/lessons/q2/03/#table-of-contents",
    "relUrl": "/lessons/q2/03/#table-of-contents"
  },"32": {
    "doc": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "title": "Overview",
    "content": "By the end of the quarter, you‚Äôll produce* a report, a poster, a public-facing website, each of which will require you to explain your work to a different audience through a different medium. The key to effective communication is knowing who your intended audience is. | For your report, your audience is senior-level data students in other domains ‚Äì that is, data scientists who generally know about the methods you‚Äôre using, but not about your domain. | For your poster, your audience is industry partners, faculty, and pre-senior data science students. These individuals may know some details of the methods you‚Äôre using, but won‚Äôt necessarily have the background you have by taking DSC 80, 100, 102, 106, 140A, etc. | For your website, your audience is the general public. | . For the remainder of this lesson, we‚Äôll discuss how to best tailor your work to various target audiences, and provide general tips on how to write effectively. The content of this article builds upon Lesson 3 from Quarter 1, on Scientific Writing. It‚Äôs a good idea to review it before proceeding, and certainly before writing the draft of your report, as your report must read like a scientific paper. *You‚Äôll also produce a public-facing GitHub repository, but that‚Äôs not relevant for the purposes of this lesson. ",
    "url": "/lessons/q2/03/#overview",
    "relUrl": "/lessons/q2/03/#overview"
  },"33": {
    "doc": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "title": "Principles",
    "content": "Regardless of the audience, here are some general principles you should follow: . | Be as specific as possible. Vagueness causes confusion. Use concrete and testable terms, and refrain from using adjectives and adverbs. (For instance, instead of saying ‚ÄúOur classifier is much more accurate than the previous state-of-the-art model on similar tasks‚Äù , say ‚ÄúOur classifer achieves a testing accuracy of 84% on TritonDataset, higher than the previous record set by TritonModel of 81%.‚Äù) | Avoid unnecessary terminology and the curse of knowledge. That is, define and explain concepts in plain English so that other data science majors outside of your domain and hiring managers at your dream company can understand what you did and why it‚Äôs relevant. After writing a report, website, or poster, step aside and try to unlearn the things you already know. Then, approach the draft again with a fresh pair of eyes ‚Äì more often than not, you will find blindspots of your earlier self. | Try to tell a story! Regardless of the platform, you are telling a story about your data. Stories are easier to follow if you have a main argument. Decide what is the central dramatic argument of your delivery. Have a strand of arguments taht lead to the main point if it is complicated. Spend more time on the parts of your analyses that are interesting, and quickly cover the parts that are uninteresting (but still report them). | . ",
    "url": "/lessons/q2/03/#principles",
    "relUrl": "/lessons/q2/03/#principles"
  },"34": {
    "doc": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "title": "Knowing Your Audience",
    "content": "The primary way in which you‚Äôll tailor your explanations of your work to suit different audiences is by controlling the amount of detail discussed. This will allow you to engage each target audience without losing them with overly complicated jargon or boring them with basics they‚Äôre already familiar with. To do this well, you need to be intimately familiar with your project yourself and understand it hollistically, from the birds-eye view of why it‚Äôs relevant down to the details. An age-old saying is ‚Äúthe best way to learn something is to teach it to someone else,‚Äù and a big part of why that‚Äôs true is because teaching exposes gaps in your knowledge. To make sure that you truly understand your project‚Äôs context and details, try explaining it to people with a variety of backgrounds: . | Your teammates. | Others in your domain, not on your team. | Others in the capstone, not in your domain. | Pre-senior data science students. | Friends from high school not pursuing data science (and adjacent) degrees. | High school students and elementary school students (if you somehow know any!). | . You‚Äôll find that it can be just as hard, if not harder, to discuss your project with a general audience who knows nothing about data science or your domain as it is to discuss it with your teammates and your domain mentor. For each of the target audiences below, we‚Äôll discuss what you‚Äôll focus on in your communications with them, and also what you‚Äôll gain from communicating with them. | Audience | Approach | . | Domain Experts, e.g. domain mentors, others in your domain | Regularly discussing the details of your work with your teammates will allow them to identify any gaps in your understanding. You may find them saying, ‚ÄúIs that really what you did, and are you sure that‚Äôs correct?‚Äù Many of these technical details may not make it into your final deliverables explicitly, but it will be clear whether or not you understand the details of your project to other experts when they look at your methods and results sections and browse through your code. In weekly section meetings, you‚Äôll have an opportunity to discuss your project with others in your domain at a slightly higher level than you would with your teammates, which will allow you to ensure that your understanding is still consistent when the tinest of details are not relevant. | . | Other Data Scientists, e.g. other capstone students not in your domain, mentors and faculty at the capstone showcase | To those who have a similar understanding of data science methodology as you do, you will spend most of your time discussing how problems in your domain are generally approached, and the specific methods that you‚Äôre using in your project. You won‚Äôt need to discuss every single implementation detail with this audience, but they should understand the gist of the methods used. This is the audience to which most of your report will be tailored to, as well as your poster presentation at the capstone showcase and some sections of your website. Make sure not to provide too many details as to be overwhelming ‚Äì think critically about what this audience needs to know, and make sure you provide just enough context for them to be able to understand. | . | Educated Public, e.g. non-DS majors in university, high school students with some quantitative literacy | This audience will not have the background to understand your implementation details. Instead, focus your communication on the problem you‚Äôre working on and why it is relevant and impactful. Discuss how the problem is approached with data ‚Äì for instance, what kinds of data is relevant for solving the problem, how it‚Äôs collected, and how it is relevant ‚Äì but keep the technical terminology to a minimum. (For instance, it‚Äôs fair to assume that most people in this audience know about means and standard deviations, but not about how neural networks work.) Spend a fair bit of time discussing the results and their broader implications. | . | General Public, e.g. elementary school students, readers of news articles | This audience my not have any statistical training, and so the focus should be on describing the field in which the problem lies, why the problem is important, and what the implications of the results are. | . ",
    "url": "/lessons/q2/03/#knowing-your-audience",
    "relUrl": "/lessons/q2/03/#knowing-your-audience"
  },"35": {
    "doc": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "title": "Providing Context",
    "content": "In Lesson 3 from Quarter 1, we emphasized the importance of starting broad and gradually providing more details, when writing an introduction or providing an elevator pitch. (source) In such cases, you should expect to spend about 50% of your time introducing the problem area and providing context, and much less time on specific details. By framing the problem being solved, you can make what may otherwise seem like a boring result sound impactful. The definition of ‚Äúbroad‚Äù depends on the audience. To a trained data scientist, ‚Äúbroad‚Äù might refer to how your project fits into your field, whereas to the general public, ‚Äúbroad‚Äù might refer to how your field fits into the world as a whole; you can‚Äôt expect the general public to know much about your field a priori. In Lesson 3 from Quarter 1, we also introduced the related context, content, conclusion approach to structuring scientific communication. At the time, we brought this up in the context (no pun intended) of scientific papers, but it‚Äôs also useful when structuring oral presentations and websites. This model allows you to bring your audience gently up to speed with your work ‚Äì it‚Äôs important to remember that they‚Äôre just hearing about your work for the first time, and haven‚Äôt spent the past few months working on it. | Context: Tell the audience what you are going to tell them ‚Äì tell them why they should care. | Content: Tell them about your approach and results. | Conclusion: Recap your content, and how it is relevant with regards to the context you provided at the start. | . In this way, you tell your audience about your work three times, giving them time to digest the material. Throughout your communication, make sure to weave through examples that illustrate your points. Good examples are explicitly tied to the point being made, and take very little setup. It will be nearly impossible to write a report or website that explains everything at the right level in one shot. Instead, aim to iterate on your work regularly (as the Agile method of product management suggests). By repeatedly rewriting your introduction, you will clarify to yourself how your project fits in with the bigger picture in your domain, and potentially discover new ways in which your work is relevant. Again, to effectively explain your work to others, you need to deeply understand it yourself. To improve your understanding, and hence your work itself, frequently practice discussing your work with others. ",
    "url": "/lessons/q2/03/#providing-context",
    "relUrl": "/lessons/q2/03/#providing-context"
  },"36": {
    "doc": "Quarter 2, Lesson 3 ‚Äì Effective Communication",
    "title": "Examples and Exercises",
    "content": "As a reminder, at the bottom of the Quarter 2 Project specifications, we provided several examples of projects broken down into websites, papers, and code repositories. If you haven‚Äôt already, you should try and find an example there that matches the structure of your project and use it as inspiration as you start to complete your deliverables. To help you get started, work on the following exercises. Exercise 1: Finding Exemplars . The details and norms of effective communication vary by field ‚Äì the norms in biology are different than those in computer science, for instance. Look to your mentors to provide you with best practices. So that you‚Äôre familiar with work that meets your mentors‚Äô standards, do the following: . | Find two examples in your field of writing to a specialist. (These may be papers you read or replicated in Quarter 1.) | Find two examples in your field of writing to a general audience. (For instance, look at blog posts or news articles.) | Do the same for oral presentations. (For instance, look at university or conference presentations and TED talks.) | . Exercise 2: Communicate Thorugh Specificity . Specify the problem that your project is solving in concrete, testable terms and hypotheses. | If you‚Äôre working on an analysis project, you should define what a ‚Äúgood‚Äù result means. | If you‚Äôre building a product, you should have a quantitative metric for what ‚Äúsuccess‚Äù looks like. | . Exercise 3: Write Your Results Now! . As counterintuitive as it may be, it can be a good idea to write your results section immediately after writing your introduction section. While you won‚Äôt have the actual numbers yet, you can create placeholder graphs and tables that, eventually, will contain key results. By doing this, it will clarify what you need to accomplish in your methods section to have a complete report. Make sure to create multiple sets of figures for different audiences. ",
    "url": "/lessons/q2/03/#examples-and-exercises",
    "relUrl": "/lessons/q2/03/#examples-and-exercises"
  },"37": {
    "doc": "Quarter 2, Lesson 4 ‚Äì Posters and Oral Presentations",
    "title": "Quarter 2, Lesson 4 ‚Äì Posters and Oral Presentations",
    "content": "On February 12th ‚Äì in just two weeks ‚Äì you‚Äôll be required to submit checkpoints for your report and code. In the following weeks, you‚Äôll be required to submit checkpoints for your poster (February 19th) and website (February 26th). Ultimately, your poster and website will be seen by your peers, mentors, industry partners, future employers and grad schools, and the community more generally ‚Äì you should expect to spend a significant amount of time on each, so that you and your mentor are proud of the result. This lesson will give you guidance on how to prepare a scientific poster and prepare for the showcase; next week‚Äôs lesson will focus on websites. Submit your final poster PDF (due March 9th at 11:59PM) here. ",
    "url": "/lessons/q2/04/",
    "relUrl": "/lessons/q2/04/"
  },"38": {
    "doc": "Quarter 2, Lesson 4 ‚Äì Posters and Oral Presentations",
    "title": "Table of contents",
    "content": ". | Overview | Conversations . | Preparation | . | Poster Guidelines . | Required Reading | Additional Resources | . | . ",
    "url": "/lessons/q2/04/#table-of-contents",
    "relUrl": "/lessons/q2/04/#table-of-contents"
  },"39": {
    "doc": "Quarter 2, Lesson 4 ‚Äì Posters and Oral Presentations",
    "title": "Overview",
    "content": "The capstone showcase on March 15th will be a poster session, which means you will present your project using a poster. During your 1.5 hour block, you and your group will stand next to your poster as attendees approach you to ask and hear about your work. If you‚Äôve never seen a poster session before, you can see footage of the 2018 CSE Internship Symposium poster session below. ",
    "url": "/lessons/q2/04/#overview",
    "relUrl": "/lessons/q2/04/#overview"
  },"40": {
    "doc": "Quarter 2, Lesson 4 ‚Äì Posters and Oral Presentations",
    "title": "Conversations",
    "content": "At the poster session, when someone approaches you and your poster, the first question you can expect them to ask is . So, what‚Äôs your project about? . To answer their question, you‚Äôll give a short, well-rehearsed elevator pitch that introduces your project, the context in which it lies, and its impact. As a reminder, attendees at the capstone showcase will come from a variety of backgrounds: . | Fellow capstone students. | Other UCSD students (some data science, some not). | Faculty mentors. | Industry mentors. | . As such, the elevator pitch you start with should be general enough so that all audiences will be able to understand the core elements of your work just by listening to it. As you did for the elevator pitch you recorded in Quarter 1, and as you read about in last week‚Äôs lesson, you should structure your elevator pitch as follows: . | Context: Tell the audience what you are going to tell them ‚Äì tell them why they should care. | Content: Tell them about your approach and results. | Conclusion: Recap your content, and how it is relevant with regards to the context you provided at the start. | . Keep your elevator pitch short, no more than 2 minutes long. This is so that, after hearing your elevator pitch, attendees have time to ask questions to hear more about the parts of your project that interest them, before they walk away to another project. While your elevator pitch will be general, you should be prepared to answer questions that involve varying levels of detail; a first-year data science major in DSC 10 will ask different questions than a data science professor who is mentoring other groups will. Preparation . The first key to success is rehearsing your elevator pitch. You‚Äôll be required to do this with your mentor in section, and with TAs in Week 8. But you‚Äôll need to practice much, much more than twice ‚Äì in the weeks leading up to the showcase, plan to practice your elevator pitch repeatedly with friends and family of a variety of academic backgrounds. No matter how confident you are in your presentation skills, practice, practice, practice! . When practicing your elevator pitch, you may find it useful to use slides to structure your presentation (though, of course, you will not be able to actually present the slides at the poster session). We suggested this approach in the Quarter 2 Proposal Elevator Pitch assignment in Quarter 1. Ultimately, though, you‚Äôll need to be able to deliver your elevator pitch without referring to notes of any kind. Sure, you‚Äôll have your poster, but while you‚Äôre speaking, your poster should serve as a visual aid that contains visualizations and summaries of key results. You can point to various figures and sections of your poster, but make sure you are not simply reading off your poster ‚Äì that‚Äôs not engaging. The best way to prepare for the questions you‚Äôll receive at the showcase is to let your audiences during your practice runs ask questions, and come up with answers to all of them. This is why it‚Äôs important to practice giving your pitch to different audiences ‚Äì different audiences will be curious about different aspects of your project and will require different levels of detail to be satisfied. As we said in the Quarter 2 Proposal Elevator Pitch guidelines, make sure that you can turn your pitch into a conversation if someone asks a question in the middle. Remember that all group members will receive a presentation grade ‚Äì so all group members need to be able to talk and answer questions about the project at the showcase. ",
    "url": "/lessons/q2/04/#conversations",
    "relUrl": "/lessons/q2/04/#conversations"
  },"41": {
    "doc": "Quarter 2, Lesson 4 ‚Äì Posters and Oral Presentations",
    "title": "Poster Guidelines",
    "content": "Your poster will primarily serve as a visual aid as you present your work. It should contain: . | A prominent, informative title, that immediately tells the viewer what the project is about. (This should be the same as the title of your paper; if you haven‚Äôt thought about what this will be, now is as good of a time as any.) | The names, emails, and institutional affiliation for all group members, including your mentor. | One section for each section of your report, in which the key points are summarized as short bullet points and in tables and graphs where possible. | A link to your project website (ideally using some sort of URL shortener or QR code), which will also have links to your paper and GitHub repository. | . While the focus should be on visuals, your poster should also be self-contained ‚Äì just by looking at your poster, someone should be able to understand the main idea behind your project, the context in which it exists, and its impact, without you having to be present. After all, your poster may eventually be hung up in the hallway of the new HDSI building ‚Äì passerbys looking at your poster should be able to understand what you did. On March 9th, you will submit your poster to us as a PDF of size 48‚Äù x 36‚Äù. Make sure that all text and figures on your poster are large and legible ‚Äì to do this, ensure that your figures are exported at a resolution of 300 DPI (dots per inch). See here for some guidelines. We won‚Äôt reinvent the wheel here ‚Äì there is a wealth of resources available online that you can consult for guidance on how to produce a poster. Your mentor is also a valuable resource ‚Äì they‚Äôve almost certainly created a poster before, and ultimately they will be the ones grading your poster. For actually creating your poster, you‚Äôre free to use any tools you‚Äôd like, though two common choices are LaTeX and Google Slides/Powerpoint. You‚Äôll find templates in all sorts of formats online. For one, Kengchi Chang (a methodology TA) has provided links to two LaTeX templates he has used; Example 1 looks like this: . Below are several other resources. You‚Äôd be well suited to read the links in the ‚ÄúRequired Reading‚Äù section before starting on your poster. Required Reading . | Haq, Making the most of your conference poster. This set of slides clearly describe what the purpose of a scientific poster is and how to structure one. | Alley, Scientific Posters. A good, quick page to read to understand the purpose of a scientific poster, with examples. | Ellis, Data Science Presentations. Not all of the content in these slides are directly applicable, since you‚Äôre not creating slides, but many of the examples towards the end of how to produce effective visualizations are directly relevant, since much of your poster will consist of visuals. | NeuroWire, Tips for presenting your scientific poster at a conference. An excellent article that details what the role of your poster is in your overall presentation, and how to prepare for the poster session more generally. | . Additional Resources . Templates: . | Overleaf has a large library of ready-to-go LaTeX templates. | Nathaniel Johnston‚Äôs LaTeX Poster Template. | . Examples: . | UC Davis Academic Posters. This is a gallery of posters created by undergraduate student researchers at UC Davis. | UCSD CSE Internship Symposium 2021. Click around to see several examples of posters, though the examples you‚Äôll see here fit a slightly different role (they aren‚Äôt tied to scientific papers). Many of the resources linked on this page are taken from here. | . Guidelines: . | Hall, Fixing academic posters: the #BetterPoster approach. This poster template looks clean, but the design is quite radical ‚Äì ask your mentor for their thoughts on this design. | A related video: How to create a better research poster in less time. | . | Cranor, Research Posters 101. | . Start early. Figure out what content you‚Äôd like to put on your poster, and then try and find a template (or create your own) that works for your content. Submit your final poster PDF (due March 9th at 11:59PM) here. ",
    "url": "/lessons/q2/04/#poster-guidelines",
    "relUrl": "/lessons/q2/04/#poster-guidelines"
  },"42": {
    "doc": "Quarter 2, Lesson 5 ‚Äì Websites",
    "title": "Quarter 2, Lesson 5 ‚Äì Websites",
    "content": "To recap, you‚Äôre required to present your project in several ways. | Your report describes the details of your project and its implementation. It justifies why your project is interesting and details the correctness of your work. Learn more in Quarter 1‚Äôs Lesson 3. | Your public GitHub repository contains all of your implementation details, in a reproducible way (in that someone should be able to download your repo and run your code immediately). Learn more in Quarter 1‚Äôs Lesson 2, 5, and 6. | Your poster is a visual aid that supports your oral presentation at the in-person capstone showcase. Learn more in Quarter 2‚Äôs Lesson 4. | . In this lesson, we‚Äôll detail the role of your fourth deliverable, your project website. Remember to refer to the examples presented at the bottom of the project spec and the archive of past capstone projects for context. ",
    "url": "/lessons/q2/05/",
    "relUrl": "/lessons/q2/05/"
  },"43": {
    "doc": "Quarter 2, Lesson 5 ‚Äì Websites",
    "title": "Table of contents",
    "content": ". | Overview . | Target Audience | Content and Style | . | Creating a Website . | Requirements | Static vs. Dynamic Websites | . | GitHub Pages . | Creating a Website from Scratch | Creating a Website using Jekyll | Tutorials | . | Grading | . ",
    "url": "/lessons/q2/05/#table-of-contents",
    "relUrl": "/lessons/q2/05/#table-of-contents"
  },"44": {
    "doc": "Quarter 2, Lesson 5 ‚Äì Websites",
    "title": "Overview",
    "content": "Target Audience . Your website serves as an introduction to your project for some target audience you choose. | The person at Company X that messaged you on LinkedIn. | A person browsing the internet after a Google search in your project area. | An expert in the field vaguely interested in your results. | Your friends and family from home. | . The goal of your website is to get your target audience interested in your project ‚Äì you want them to understand why your work is impactful and encourage them, if interested, to read further. Realistically, nobody is going to look through the code in your GitHub repo unless they have a good reason to. Your website will be the most prominent and public-facing of all the deliverables you create. As such, you should strive to create a high-quality website that you and your mentor are proud of. Prior instructors tell us that hiring managers for industry jobs are more likely to respond to candidates who include links to project websites on their resumes! . Content and Style . Before writing the content of your website, you should decide who your target audience is, as this will determine the level of technical detail you provide. Regardless of your audience, your site will contain many of the same sections as your report ‚Äì expect your site to contain an introduction, a methods section, a results section, and a conclusion section. | The introduction section should motivate the problem being addressed and justify its relevance to the reader. It should also introduce the methods being used. | The methods section should describe how you approached the problem. The level of detail provided depends on the target audience. | The results and conclusion sections (perhaps even just one big section in the website) should talk about the impact of the work. | . You can tailor your website for different audiences by hiding in-depth technical details behind links or dropdown menus, like the one below. Example dropdown Here are some hairy, scary details. Note that your website should be simple and easy to navigate! . | Refrain from using complicated layouts and too many pages - readers like to scroll, not click. All you‚Äôre trying to do is motivate your project. | Pictures and plots should tell your whole story, just like in your poster ‚Äì just by skimming your figures, readers should be able to get the main idea of what you‚Äôve done. | It‚Äôs a good idea to review what you did in DSC 106. | . You don‚Äôt need to write everything from scratch ‚Äì feel free to re-use material from your report. However, your website should feel more informal and welcoming than your report, and so you may need to tailor your language and explanations accordingly. ",
    "url": "/lessons/q2/05/#overview",
    "relUrl": "/lessons/q2/05/#overview"
  },"45": {
    "doc": "Quarter 2, Lesson 5 ‚Äì Websites",
    "title": "Creating a Website",
    "content": "Now that we understand the purpose of a project website, let‚Äôs take a look at how you‚Äôll create your site. Requirements . While there exist a variety of no-code platforms for building websites, like Google Pages and Squarespace, you cannot use them for this project. Instead, you must create your website using code, and you must be able to store that code in a public GitHub repository. By owning your website‚Äôs code yourself, you can choose the hosting service you‚Äôd like to deploy it on, and are protected in any sudden changes in access (for instance, you lose access to UCSD Google Pages after you graduate). That is not to say that you must write every single line of HTML, CSS, and Javascript yourself ‚Äì while you‚Äôre certainly free to, you can instead use existing templates, or use frameworks that generate HTML from other formats that are easier to write. (We‚Äôll recommend you use Jekyll through GitHub Pages, which takes a set of Markdown files and creates a website ‚Äì more on this soon.) . Static vs. Dynamic Websites . There are two general types of websites ‚Äì static websites and dynamic websites. Read this page for an excellent example that distinguishes the two. | Static websites run all computation in the client (web browser). They are created using HTML (content), CSS (styling), and Javascript (interactivity), though remember that you can create HTML, CSS, and Javascript using Markdown through frameworks like Jekyll. Static websites are not only easier to get up and running, but are also free (e.g. through GitHub Pages) or very cheap to run. | Dynamic websites require server-side computation. In summary, the client (web browser) sends a request to a server, which sends a response back to the client. To run a dynamic website, you must either run and maintain a server of your own or pay for a cloud hosting service; either way, as your website becomes more popular, your costs will increase. Examples of dynamic websites include websites that access information stored in databases and websites that allow users to upload datasets and return predictions from an ML model. | . Unless your project involves creating a web-based product (e.g. a dashboard or marketplace), your project website should be a static website to minimize overhead. You‚Äôd be surprised at the level of interactivity that is possible with a static webpage (including model execution ‚Äì look at Tensorflow JS, for instance.) . For instance, here is an interactive map created with plotly that students in DSC 80 are creating this quarter. You can drag and zoom with it. If you think you need a dynamic webpage, you likely have already looked into how to set one up, but feel free to contact methodology staff if you have any questions. ",
    "url": "/lessons/q2/05/#creating-a-website",
    "relUrl": "/lessons/q2/05/#creating-a-website"
  },"46": {
    "doc": "Quarter 2, Lesson 5 ‚Äì Websites",
    "title": "GitHub Pages",
    "content": "GitHub Pages hosts static websites for free; I personally make heavy use of this feature, and we encourage you to as well, both for this project and in the future. | Each GitHub user is allowed to create one personal website, published at &lt;username&gt;.github.io. | For instance, the capstone course website, dsc-capstone.github.io, is the personal website for the GitHub user dsc-capstone; the code for the website is stored at github.com/dsc-capstone/dsc-capstone.github.io. | As another example, my personal website is at surajrampure.github.io, and its source code is in github.com/surajrampure/surajrampure.github.io. Since I have a custom domain setup, the link appears as rampure.org, however. | . | Each project you create can have a project website, published at &lt;username&gt;.github.io/&lt;reponame&gt;. | For instance, the site for the repository github.com/dsc-capstone/projects-2021-2022 is hosted at dsc-capstone.github.io/projects-2021-2022. | . | . You may opt to host your site out of a separate branch in your existing public repository, like gh-pages, or create a separate repository solely for your website. Creating a Website from Scratch . To create the most basic possible page on GitHub Pages: . | Create a repository (or branch in a repository) named &lt;project&gt;. | Add, commit, and push a basic index.html file. | Go to your repository‚Äôs settings, then click ‚ÄúPages‚Äù on the left, and select a source and branch. (See Publishing from a branch for more details.) | . We recommend you don‚Äôt do this, since it‚Äôs likely more work than is necessary, but you‚Äôre free to. If you want to go this route, you may find the GitHub Pages landing page to be helpful. Creating a Website using Jekyll . Jekyll is a Ruby-based tool that takes a set of Markdown files and images and turns it into HTML automatically. It allows you to create a static website by mostly editing Markdown files. It‚Äôs particularly useful for websites that have multiple pages, but it‚Äôs also useful when you don‚Äôt want to worry too much about formatting. GitHub Pages has Jekyll installed on its servers; this means that all you have to do is push Markdown code and your assets to a repository, and GitHub will handle the deployment. To create a Jekyll-based site using GitHub Pages, follow the instructions here. In short, you‚Äôll have to: . | Create a repository (or branch in a repository) named &lt;project&gt;. | Go to your repository‚Äôs settings, then click ‚ÄúPages‚Äù on the left, then select a source and branch. | . Here is a barebones example of a Jekyll site; you can view the source code here. | Note that the _config.yml file specifies that the site‚Äôs theme is cayman. There are several existing themes; browse them here and read more about changing themes here. | . To see the source code for a more complicated Jekyll site, in addition to looking at past capstone project websites, you can look at the source code for dsc-capstone.github.io. | The _layouts folder contains templates for various kinds of pages. | In most pages‚Äô source code, like this one (meta!), you will see front matter, delimited by ---, at the top of the page. Front matter provides metadata for a particular page; for instance, it may specify which template in _layouts to use. | . More examples are linked below. | Aaron Fraenkel‚Äôs malware domain site; given the link to the site‚Äôs repo, can you find the site itself? | GitHub Pages‚Äô gallery of sites. | . The instructions above only show you how to configure a Jekyll site directly on GitHub Pages. If you‚Äôd like to render your Jekyll site locally, you‚Äôll need to install Jekyll (which means you‚Äôll also need to install Ruby). Find those instructions here. Tutorials . Here are a few additional resources for creating sites on GitHub Pages. | The official GitHub Pages documentation. | Jonathon McGlone‚Äôs through, from the start, tutorial with demo code. | Jekyll documentation, mentioned above. | More examples of visualization tools by TA Kengchi Chang. | . ",
    "url": "/lessons/q2/05/#github-pages",
    "relUrl": "/lessons/q2/05/#github-pages"
  },"47": {
    "doc": "Quarter 2, Lesson 5 ‚Äì Websites",
    "title": "Grading",
    "content": "In most cases, your project website will be your group‚Äôs secondary deliverable. In that case, the rubric we‚Äôll use to grade your website is as follows: . | Grade | Description | . | A | Well thought-out visual presentation for a specific target audience. Includes some content for a general audience. The code for the website is publicly available on GitHub. | . | B | The website is almost identical to the project report. The code for the website is publicly available on GitHub. | . | C | The website contains some content about the project, but is incomplete. A website builder service may have been used. | . | F | The website contains little to no content, and its code is not on GitHub. | . If your primary deliverable is a web-based application, then in addition to the above standards, your mentor will grade the content of your website itself. Remember that the checkpoint for your website is due on February 26th. See the Quarter 2 Project spec for details on what is expected of you for the website checkpoint. ",
    "url": "/lessons/q2/05/#grading",
    "relUrl": "/lessons/q2/05/#grading"
  },"48": {
    "doc": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "title": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "content": "Reminder: Read the Quarter 2 Syllabus and Quarter 2 Project specifications, and sign up for a Week 3 TA Check-In. ",
    "url": "/lessons/q2/02/",
    "relUrl": "/lessons/q2/02/"
  },"49": {
    "doc": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "title": "Table of contents",
    "content": ". | Overview | Fundamentals . | Commits | The Anatomy of a Repository | Navigating a Repository | . | Branching . | Single-Branch Workflows | Multiple-Branch Workflows | . | Guidelines . | Merge Conflicts | Version Control and Notebooks | Version Control in DSC 180B | . | Other Resources | . ",
    "url": "/lessons/q2/02/#table-of-contents",
    "relUrl": "/lessons/q2/02/#table-of-contents"
  },"50": {
    "doc": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "title": "Overview",
    "content": "You‚Äôve already used Git and GitHub before in some capacity ‚Äì for instance, in DSC 30 and 80, you used it to access assignments, and in DSC 180A you created a few repositories to submit your work. However, you may not have had to use Git to work in a team, and as such may not be aware of some of its more powerful features. In this lesson, we‚Äôll review the basics of Git and give you tips on how to work with Git on a team. You will mess up version control when working with others on your project; knowing the basics of how Git works will make it easier to fix things! When you use Git properly: . | You‚Äôll be able to automatically backup your work without having to make copies. | Reverting to a previous version of your work, if, say, you want to undo someone‚Äôs work, is easy. | You and your teammates will be able to work at the same time without running the risk of ruining others‚Äô work. | . Note that this lesson will only scratch the surface of Git‚Äôs features; there are plenty of articles online, like this one, that cover more details. ",
    "url": "/lessons/q2/02/#overview",
    "relUrl": "/lessons/q2/02/#overview"
  },"51": {
    "doc": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "title": "Fundamentals",
    "content": "Up until now, you may have thought of the terms Git and GitHub as being synonyms, but that‚Äôs not quite the case: . | Git is an open-source ‚Äúdistributed version control‚Äù system. This is a fancy way of saying that it‚Äôs a tool that tracks the version history (i.e. changes) of your code and stores it on your local computer. Git doesn‚Äôt inherently rely on the internet. Git is not the only version control system; SVN is another. | GitHub is a remote server that allows for the syncing of distributed Git-versioned projects. For instance, if three team members are working in parallel on the same code base, and each is using Git locally on their computer, GitHub will combine all three version histories and store it in one place. While GitHub is the most popular Git-based platform, there are several others, including BitBucket and Gitlab. GitHub is owned by Microsoft. | . (source) Commits . The core building block of Git is the snapshot. A snapshot records what your files look like at a particular instance in time. Think of creating a snapshot as saving your work. Note that Git only stores the differences between snapshots, rather than entire copies of your repository at every snapshot. This makes the version history dramatically smaller. However, this only works efficiently in cases where Git is good at determining the difference between files. This is generally true for text-based files, but not in the case of binary files, which are how images are stored in notebooks. So, if you have a notebook that programatically generates plots or images and repeatedly commit versions of that notebook, Git will end up storing copies of each version of the notebook, which will lead to large repository sizes. In Git-speak, the act of creating a snapshot (i.e. saving your work) is called committing. A commit consists of: . | Information on how the files changed from the previous commit. | A reference to the previous commit. (You can almost think of a project‚Äôs version history as a linked list of commits!) | A unique identifier (hash code). | . To create a commit, use the syntax git commit -m \"commit message\". The commit message should be a human‚Äìreadable message explaining the difference between the current and previous commit. There‚Äôs a good chance you‚Äôve written commit messages like ‚ÄúDoes this work?‚Äù or ‚ÄúI‚Äôm tired‚Äù before, out of frustration. Moving forward, try your best to use descriptive commit messages that will be useful when you look back on them. The Anatomy of a Repository . A repository is a collection of files and their version history. This history lives in a hidden directory called .git at the root level of a Git-initialized repository. To add Git tracking features to an existing folder, run git init; however, you often won‚Äôt have to do this directly since it‚Äôs common to initialize a repository directly on GitHub and git clone it locally, at which point a .git folder already exists. The .git directory of a repository contains: . | An index of all files being tracked by Git. | Commit hashes and ‚Äúdiffs‚Äù (the differences between commits). | The remote address of a repository on GitHub, if one is set up. This remote repository is known as the origin, as in, where the repository was originally cloned from. | . The contents of the .git folder for the repository that hosts dsc-capstone.github.io. Note that most of these files are not human-readable. Navigating a Repository . There are a few different ‚Äúplaces‚Äù in which you will work in a repository on your computer: . | The working directory is the file system that you see on your local machine, that contains the files you‚Äôre editing. | The staging area consists of the files that you‚Äôd like to include in your next commit. Add a file to the staging area by running git add &lt;file name&gt;. You can see the files in staging by running git status. | A snapshot saves the state of the staging area when you make a commit ‚Äì if you don‚Äôt add a file to the staging area, its changes will not be saved in the commit. | . There are two main ways to interact with a remote repository (which, again, is a repository on a server like GitHub). | To download the changes made by someone else to a remote repository, you fetch the changes by running git fetch. This brings the changes to your local repository, but not into your working directory (see the diagram above). The command you‚Äôre more familiar with is git pull, which is a combination of git fetch and git merge, which merges the remote repository into your working directory. | After committing your changes to your local repository, in order to add them to the remote repository, you git push. This is a shortcut for git push origin main, which specifies that you want to push to your remote repository using the changes in the main branch of your local repository. Always exercise caution when pushing changes to the remote repository, especially in the main branch! . | . ",
    "url": "/lessons/q2/02/#fundamentals",
    "relUrl": "/lessons/q2/02/#fundamentals"
  },"52": {
    "doc": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "title": "Branching",
    "content": "In Git-speak, a ‚Äúbranch‚Äù is an independent copy of the files in a repository. Your repository has a single main branch, which should contain the latest runnable version of your code. Think of the main branch as the ‚Äúproduction‚Äù branch. Single-Branch Workflows . You‚Äôre likely used to using Git in a centralized fashion, meaning that all of your work was done in the main branch. Here‚Äôs how a single-branch workflow looks when working individually: . | Pull the latest version of the repository from remote, using git pull my_repo. | Add changed files to staging, e.g. git add main.py, git add data/test_data.csv. | Commit the staged changes with a helpful commit message, e.g. git commit -m \"Updated add_integers and added test data.\" | Push the changes to remote, using git push. | . While this workflow is useful when working alone ‚Äì say, when you need to have a copy of your code on both your local machine and on DSMLP ‚Äì it can get messy quickly when working with others. Imagine the following scenario: . | You pull the remote repository. | Your teammate pulls the remote repository and makes changes to files A and B. | You make changes to files A and B without repulling. | You try to push your changes to files A and B, but your push is rejected, because Git doesn‚Äôt know how to combine your changes with your teammate‚Äôs changes. | . This is known as a merge conflict, and you‚Äôve likely run into one before. When working on larger projects, this single-branch workflow gets messy quickly, and there‚Äôs a better solution ‚Äì using multiple branches. Multiple-Branch Workflows . Recall, a branch is an independent copy of the files in a repository. One creates a branch by ‚Äúbranching off‚Äù an existing branch, most commonly the main branch. Let‚Äôs look at an example workflow. In the figure above, each color is a different branch and each node is a commit. Work on the code moves from left to right. | The teal nodes represent the main branch, which contains the latest runnable version of a project‚Äôs code ‚Äì it always ‚Äúwork.‚Äù | The yellow nodes represent a develop branch, which is used for experimentation. From there, more branches are created to implement specific features, in order to not introduce any errors in the develop branch. | The pink node represents a hotfix branch, is was created to fix a bug in main that has nothing to do with the work in develop. After making commits in the hotfix branch, the hotfix branch is merged back into main, which now reflects the latest changes from hotfix. | Eventually, the develop branch is merged back into main, at which point main will contain new, working features. | . In DSC 180B, each member of a group will work on a separate branch, and the group will merge all branches into main once a week. That is, you will each have your own version of a develop branch. Instead of simply naming your branches develop, your branches should be named and separated based on features ‚Äì that is, create one branch for updating your data cleaning code, another branch for updating your model‚Äôs features, etc. If one person is working on multiple unrelated tasks in a single repository, they should use a different branch for each task, too. You may elect to include team members‚Äô initials in branch names, e.g. SR_etl. You may wonder how this helps avoid merge conflicts ‚Äì it doesn‚Äôt. However, when using multiple branches, it becomes obvious how to merge changes between the two branches, since each branch has a specific purpose. Let‚Äôs look at how such a workflow may look in practice. Suppose we have a working main branch and want to update our ETL code to add a new data source. | Create a new branch off main for updating ETL code and switch to it, using git checkout -b update_etl. | Do work in update_etl. | Add and commit changes, e.g. git add etl.py and git commit -m \"Updated ETL pipeline.\". | Push update_etl to remote, using git push (or git push origin update_etl). | . Once we‚Äôve finished working in the update_etl branch, we‚Äôll need to merge it back into main. To do so: . | Switch to main, using git checkout main. | Pull the latest version of main, using git pull. | Switch back to update_etl, using git checkout update_etl. | Merge main into update_etl, using git merge main. This will require fixing merge conflicts; see below for tips. | Push the latest version of update_etl back to remote. | Make a pull request on GitHub, telling your other team members what you‚Äôve changed and asking them to review your work. | Team members, if they approve, will merge the pull request directly from the website. Now, main will reflect your changes from update_etl. | Locally, switch back to main and pull, using git checkout main and git pull. | . ",
    "url": "/lessons/q2/02/#branching",
    "relUrl": "/lessons/q2/02/#branching"
  },"53": {
    "doc": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "title": "Guidelines",
    "content": "Merge Conflicts . When using git merge main, or when in scenarios like the one described here, you‚Äôre likely to encounter merge conflicts. The only way to resolve merge conflicts is to open the impacted file(s) and manually decide which branches‚Äô changes to keep. In the example above, there are two versions of the header ‚Äì one above the ======, and one below. &lt;h1&gt;Grand Circus Merge Demo&lt;/h1&gt; . &lt;h1 class=\"header\"&gt;Merge Demo&lt;/h1&gt; . Once you decide which version to keep, you can commit your changes. Version Control and Notebooks . Under the hood, Jupyter Notebooks are stored as JSON, a file format for storing data. Unfortunately, fixing merge conflicts is notoriously difficult in JSON, particular when code output is present. After all, Git is meant to version code, but notebook outputs are data. As we saw in DSC 180A, there are two kinds of notebooks ‚Äì notebooks in which code is prototyped and notebooks that generate code-driven reports. | Code prototyping notebooks should be personal and not used for collaboration. Whenever you write code that others need to use, it should be stored as library code (e.g. as functions in a .py file). If you‚Äôd to commit development notebooks, never commit them to main. | Code-driven reports should be versioned, but always clear output before committing, so that only code is versioned! Additionally, reports should always be quick to run; if not, save intermediate steps to files so that the report is generated quickly. If you want to commit output (e.g. a report), export a static document (e.g. HTML or PDF) into the docs directory of your repository. | . Version Control in DSC 180B . To recap what is expected of you: . | You must have a public GitHub repository in which all of your code is written. | Your repository should have a descriptive name, not something like DSC-180B-Capstone. (It looks rather unprofessional to future employers when your repo contains a course code ‚Äì you‚Äôre building much more than a class project!) | One group member will have to create the repository; others should be added as collaborators. | . | Team members should each clone the repository and checkout their own branches. | Before your weekly check-in with your mentor, all group members should merge their latest work into main. | Branches should be small in scope and correspond to weekly tasks ‚Äì the longer you wait to merge a branch into main, the harder it becomes. | Reviewing pull requests for merging is a good way to ‚Äúget up to speed‚Äù on what everyone else did that week! | . | . ",
    "url": "/lessons/q2/02/#guidelines",
    "relUrl": "/lessons/q2/02/#guidelines"
  },"54": {
    "doc": "Quarter 2, Lesson 2 ‚Äì Collaborating with Git",
    "title": "Other Resources",
    "content": "While there numerous helpful StackOverflow answers for various Git problems (look for answers with many upvotes), try to understand what the answers are doing, otherwise you may lose unintended work! . | If you want to revert changes back to a specific commit, follow the steps here. | If you want to remove a large data file that you added by mistake to the repository, follow the steps mentioned here or here. | Understanding Git Conceptually. | . ",
    "url": "/lessons/q2/02/#other-resources",
    "relUrl": "/lessons/q2/02/#other-resources"
  },"55": {
    "doc": "Quarter 2, Lesson 1 ‚Äì Project Management",
    "title": "Quarter 2, Lesson 1 ‚Äì Project Management",
    "content": "Reminder: Read the Quarter 2 Syllabus and Quarter 2 Project specifications. ",
    "url": "/lessons/q2/01/",
    "relUrl": "/lessons/q2/01/"
  },"56": {
    "doc": "Quarter 2, Lesson 1 ‚Äì Project Management",
    "title": "Table of contents",
    "content": ". | Overview | Agile Software Development . | History of Software Development | Agile Development | Agile Development in the Capstone | . | . ",
    "url": "/lessons/q2/01/#table-of-contents",
    "relUrl": "/lessons/q2/01/#table-of-contents"
  },"57": {
    "doc": "Quarter 2, Lesson 1 ‚Äì Project Management",
    "title": "Overview",
    "content": "In Quarter 2, the methodology lessons are designed to aid you as you execute your Quarter 2 Project. While there are no methodology assignments, you can think of the later project checkpoints as being replacements for methodology assignments, in that you will apply what you learn in each lesson to a particular aspect of your project (e.g. you‚Äôll learn how to create a website on GitHub Pages, and then submit a website checkpoint for your project). Every single project deliverable, including your weekly participation assignments, must be submitted in groups. As the participation assignment mentions, you must meet with your group members weekly outside of discussion. In this lesson, we‚Äôll cover a few principles to follow, particularly in the context of developing software, so that you make the most of these weekly meetings and maximize your chances of successfully executing the proposal and schedule you developed at the end of Quarter 1. ",
    "url": "/lessons/q2/01/#overview",
    "relUrl": "/lessons/q2/01/#overview"
  },"58": {
    "doc": "Quarter 2, Lesson 1 ‚Äì Project Management",
    "title": "Agile Software Development",
    "content": "Agile is a product management technique that we recommend you follow this quarter when executing your project. Before we discuss the details of Agile development (yes, Agile is a proper noun in this context) and how you‚Äôll use it in your workflow, let‚Äôs discuss how Agile came to be. History of Software Development . Before the 1960s, software as we know it today didn‚Äôt exist. At the time, computer programs were inseparable from the hardware they were written for. It was common for projects to be localized to a single computer, and as such, there was no need for programmers to think about how to organize their code so that others could use it. Then, in the 1970s, hardware-agnostic programming languages ‚Äì such as C ‚Äì began to gain traction. This decoupling of software from hardware accelerated the growth of programming as a career, and the size of software projects dramatically increased. This led to an interesting confluence ‚Äì programmers were writing code that could, in theory, be run on others‚Äô computers, but since they hadn‚Äôt been paying attention to the robustness or organization of their code, their code often couldn‚Äôt run on others‚Äô computers. Most code didn‚Äôt work when shipped, which meant that programmers would have to spend time fixing someone else‚Äôs code before they could get it to run on their own machine. Unfortunately, in some ways, data science is still in this phase, which is why one the goals of the methodology portion of DSC 180A was to have you write and maintain your code in such a way that others could obtain and run your code without any additional setup. One proposed strategy for managing the development of large group software projects was waterfall development, which is still in use today in some organizations. In waterfall development, before work begins on a project, the team clearly states: . | What steps are required to execute the project. | What needs to be completed in order to move from step N to step N + 1, for N = 1, 2, 3, ‚Ä¶ | . Then, the team works in on these steps in series ‚Äì that is, the team finishes step 1, then once step 1 is finished, the team finishes step 2, and so on. (source) While this process can work in some settings, there are clear pitfalls: . | Not each team member has the same set of skills, and so often each will be assigned to a single step. This results in a lots of wasted time ‚Äì what are your team members supposed to do while you‚Äôre working on your step? | If the project requirements change in, say, step 5, the entire process needs to be restarted. | . Agile Development . In 2001, a group of developers wrote the Manifesto for Agile Software Development: . We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more. Agile development is centered around having a working product (i.e. working code) at each stage of the project development process. This is in stark contrast to the waterfall method, in which the project only ‚Äúworks‚Äù at the very end. Agile development also emphasizes flexibility, which is crucial in data science projects. Plans change often, and by working incrementally and reflecting frequently (in your weekly meetings), you‚Äôll be able to quickly shift the trajectory of your project without wasting any time. The following video does a good job of providing intuition for the difference between Agile and waterfall development. Agile Development in the Capstone . As mentioned earlier, you‚Äôre encouraged to follow the principles of Agile development when working on your projects this quarter. Waterfall development will not work ‚Äì there is simply no time for you to sit idle for weeks while your partners work. All group members need to be active each week. When creating your schedule last quarter, you created a list of tasks that each group member will do each week. Now that you have more clarity on what the checkpoint deliverables are and when their deadlines are, you should modify your schedule such that each checkpoint deadline is accounted for. You should plan your quarter in such a way that, every week: . | Each group member can work in parallel. That is, Person B should not have to wait for Person A to finish a task before they can start working. If Person B is working on a feature that depends on Person A‚Äôs output, Person B can use test data (or something similar) as a placeholder for Person A‚Äôs output until it is finalized. (For a concrete example, Person A may be writing scripts that clean raw data, and Person B may be building a machine learning model.) | Each group member is working on a different task than in the previous week. It‚Äôs totally fine if a particular task takes two weeks to complete, but the description of that task in your schedule should be different for both weeks, to reflect the breakdown of that task into smaller subtasks. | Each group member knows what everyone else is actively working on. Not only will this held each group member accountable, but it‚Äôll also give other group members the opportunity to help resolve issues with tasks that weren‚Äôt initially assigned to them. | The team, as a unit, produces code that is fully buildable and runnable. All group members should regularly merge their code into the main branch of the repo, which will ensure that the main branch always contains a ‚Äúcomplete‚Äù project. It should not be the case that your group‚Äôs codebase only runs in Week 7. (Using the example from the embedded video above: your repo should always contain a fully-constructed house. The number of rooms and hallways of that house can change as the weeks go on, but it should always be a complete house.). We‚Äôll cover best practices for using Git and GitHub next week, but each week, all | The team, as a unit, decides what the plan for the next week is, and if any part of the existing schedule needs to change. | . To achieve all of these goals, it will be necessary to be in regular communication with your group, not just in section, but in your (required) separate weekly meetings and asynchronously. ",
    "url": "/lessons/q2/01/#agile-software-development",
    "relUrl": "/lessons/q2/01/#agile-software-development"
  },"59": {
    "doc": "üè° Home",
    "title": "Data Science Capstone",
    "content": "DSC 180AB, Fall 2023 and Winter 2024 at UC San Diego . Coming soon! . ",
    "url": "/#data-science-capstone",
    "relUrl": "/#data-science-capstone"
  },"60": {
    "doc": "üè° Home",
    "title": "üè° Home",
    "content": " ",
    "url": "/",
    "relUrl": "/"
  },"61": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Lesson 3 ‚Äì Scientific Writing",
    "content": "All lectures will be delivered as readings that you complete on your own time. Post questions with the lesson here. There is no Methodology Assignment associated with this lesson. However, there are a few ‚ÄúAction Items‚Äù and ‚ÄúExercises‚Äù that you should complete while reading through the lesson, as they‚Äôll help you prepare for your Quarter 1 Project. Specifically, the Quarter 1 Project Checkpoint is due at the end of Week 5, on Sunday, October 30th. The report part of your checkpoint submission will consist of the title, abstract, and introduction of your Quarter 1 Project. Reminder: Take a look at the new Resources tab of the course website. Also, refer to the recording of this live session as a supplement to this lesson. ",
    "url": "/lessons/q1/03/#lesson-3--scientific-writing",
    "relUrl": "/lessons/q1/03/#lesson-3--scientific-writing"
  },"62": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Table of contents",
    "content": ". | Overview | Goals of Scientific Writing | Guidelines | Anatomy of a Scientific Paper . | Title and Abstract | Introduction | Methods | Results | Discussion | . | Exercises | . ",
    "url": "/lessons/q1/03/#table-of-contents",
    "relUrl": "/lessons/q1/03/#table-of-contents"
  },"63": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Overview",
    "content": "The standards for effective written communication vary by domain. Your domain should have an example of a paper that models best practices. | If your Quarter 1 Project involves replicating a paper, that paper is your example. | If, instead, your Quarter 1 Project consists of completing tasks from several papers, choose one of the papers that you‚Äôve read in your domain. | . If it‚Äôs not clear which paper you‚Äôre meant to use as an example, you can ask your mentor: . When writing the reports for our Quarter 1 Project and Quarter 2 Project, we are supposed to follow the style of a paper in our area. What paper should we use? . As you read through this lecture, you should try and map the principles discussed to the example paper in your domain. Not all of the nitty-gritty details discussed here will apply to every domain, but the high-level ideas will. Note: The principles discussed here will be used to evaluate your project reports throughout the rest of the capstone! . ",
    "url": "/lessons/q1/03/#overview",
    "relUrl": "/lessons/q1/03/#overview"
  },"64": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Goals of Scientific Writing",
    "content": "Scientific papers (henceforth, just ‚Äúpapers‚Äù) are structured differently than, say, books, blog posts, and lectures. Papers are structured in a way that makes it easy for readers with different backgrounds to easily: . | Determine if the paper will be of interest to them. | Read about just the parts of the project described in the paper that are relevant to them. | . While the names and details of sections in a paper will vary depending on the publishing venue and domain, all papers consist of the same three key components (borrowed from this meta-paper that you should also read): . | Context: At the start of the paper, there is a brief description of what problem is addressed in the paper, why that problem is interesting, and why the authors‚Äô approach is different. The goal of this section is to help potential readers determine if this paper is worth reading for them (and convince them to read it). | Content: What the authors did to solve the problem at hand. | Conclusion: The key takeaways and impacts of the results. Here, authors convince the reader why their work is meaningful. | . When you‚Äôre looking for relevant background reading for a project ‚Äì both now and in the future ‚Äì what you‚Äôll typically do is skim through the abstracts of several papers. If the abstract of a paper seems relevant, you may read the conclusion section. If the takeaways in the conclusion seem relevant to your project, you may then choose to read the bulk of the paper to see how the authors executed their project to see if there‚Äôs anything you can adapt and extend. By writing about their work in this rigid structure, authors help others understand what exactly was accomplished by their project. ",
    "url": "/lessons/q1/03/#goals-of-scientific-writing",
    "relUrl": "/lessons/q1/03/#goals-of-scientific-writing"
  },"65": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Guidelines",
    "content": "When writing a paper, follow these guidelines. | A paper is a narrative essay that describes a problem, methods to solve the problem, and the results of the approach. | In this lecture, the project descriptions, and potentially in your weekly participation questions, you are given questions that your paper should answer. However, your paper should not read as if it‚Äôs a bunch of answers to pre-canned questions back-to-back ‚Äì it really should feel like a story. | The narrative that your paper follows should be about the methods and results, not an autobiography of your project and how you worked on it. Every project produces work that is irrelevant to the results; do not discuss irrelevant work in your paper. | . | Figures (tables and graphs) should be self-contained and complete. In fact, you should strive to create figures such that readers can understand the high-level takeaways of your paper just by looking at the figures. | To ensure that you‚Äôre working towards this goal, make sure to give each figure an appropriate title, axis labels, and captions. | Keep in mind that you will know your work much better than almost anyone else who will ever read it; make sure to be careful to include all necessary details and not make assumptions about what the reader knows about your project. | . | Cite others‚Äô work frequently. Learning from and using others‚Äô research is something to be proud of! However, don‚Äôt throw in a bunch of citations just to have them ‚Äì only discuss and cite work that‚Äôs relevant. | Only include statements that are verifiably correct. If a statement is a hypothesis or opinion, make that clear. | As far as language goes: . | Use the active voice with first person plural (‚Äúwe‚Äù) to refer to both the author(s) and the reader. | Use the simplest language needed to convey your message; don‚Äôt use fancy jargon unnecessarily. Make sure to always define acronyms the first time you use them, as well as any project and domain-specific terms that may not be common knowledge. | Try to quantify as much as possible, rather than using flowery adjectives and adverbs like ‚Äúvery‚Äù and ‚Äúlarge.‚Äù Stating that your new method led to a ‚Äúvery large‚Äù improvement in accuracy over a previous method doesn‚Äôt mean anything to someone who is unfamiliar with your work ‚Äì instead, state what the actual improvement is. It‚Äôs important to be specific, as vague statements contribute nothing. | . | . ",
    "url": "/lessons/q1/03/#guidelines",
    "relUrl": "/lessons/q1/03/#guidelines"
  },"66": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Anatomy of a Scientific Paper",
    "content": "As mentioned earlier, the titles of sections in a paper may vary between publication venues and disciplines. However, most papers will contain the following sections in some form: . | Section | Purpose | . | Abstract | What did we do? | . | Introduction | What is the problem? | . | Methods | How did we approach it? | . | Results | What did we find? | . | Discussion | What did it mean? | . | References | Who did we cite? | . | Appendix | Details (particularly those that disrupt the narrative flow of the paper) | . The following chart decomposes the above structure into more detail. While its structure is slightly different than the structure above ‚Äì for instance, it treats the methods section as a part of the results section, rather than as a standalone section ‚Äì it‚Äôs still useful, as it provides the narrative questions you need to address in each section of your paper. (source) The ‚Äúgap‚Äù that the above chart mentions is the gap between prior approaches to a problem and your approach ‚Äì that is, it‚Äôs the part that‚Äôs novel about your approach. Let‚Äôs look at the sections of a paper in more detail. Title and Abstract . Both the title and abstract of a paper should describe the contents of the paper: . | The title should do so in one phrase. | The abstract should do so in one paragraph. | . Both the title and abstract must be immediately understandable to readers who are unfamiliar with your work, and should be written in plain language. Remember, people browse abstracts to determine whether a paper is worth reading further; they won‚Äôt know the technical details of your work before they read it. You‚Äôll be held to this standard in March, when you present your Quarter 2 Project at the capstone showcase ‚Äì the audience will be a mix of faculty, industry partners, and fellow students. You likely will only finalize the results and conclusions of your project towards the end of your project‚Äôs lifecycle. As such, you should only finalize your title and abstract at the end of your project. With that said, it‚Äôs a good idea to maintain a working title and abstract that you update regularly, just so that it‚Äôs clear to you what the focus of your project is. In your abstract, spend roughly one sentence on each of the following four components: . | Contextualizing the problem. What is the world in which the problem lies? Why is this problem relevant? | Reviewing gaps in prior approaches. What did prior approaches not solve? | Clearly stating your project‚Äôs contribution to the problem. What was the ‚Äúgap‚Äù that you closed, and how did you close it? | Specifying relevant details to your methods. | . Action Item Read the following abstract, taken from Robust Learning from Discriminative Feature Feedback (Dasgupta &amp; Sabato, 2020). Identify the sentences corresponding to each of the four components above. Recent work introduced the model of learning from discriminative feature feedback, in which a human annotator not only provides labels of instances, but also identifies discriminative features that highlight important differences between pairs of instances. It was shown that such feedback can be conducive to learning, and makes it possible to efficiently learn some concept classes that would otherwise be intractable. However, these results all relied upon perfect annotator feedback. In this paper, we introduce a more realistic, robust version of the framework, in which the annotator is allowed to make mistakes. We show how such errors can be handled algorithmically, in both an adversarial and a stochastic setting. In particular, we derive regret bounds in both settings that, as in the case of a perfect annotator, are independent of the number of features. We show that this result cannot be obtained by a naive reduction from the robust setting to the non-robust setting . Introduction . The introduction sets the context for the rest of the paper. After the abstract, it is the first part of your paper that readers will read, and often the only thing they will read. Your introduction will start broad and become narrower and narrower as you add more detail. (source) There are three pieces to an introduction section: . | An introductory paragraph. The first paragraph in your introduction will start by introducing the context in which your project is relevant. It will then state the problem that you‚Äôre trying to solve, and summarize some of your key results and their implications. | A literature review and discussion of prior work. Here, you‚Äôll provide context on what has been attempted in the past in the realm of your problem. This will both set up the context in which your problem exists and shed light on why your approach is different. | A data description (this is a data science capstone, after all). | If you‚Äôre in a data-focused domain, you should describe why the data you‚Äôre using will help address the problem at hand. | If you‚Äôre in a methods-focused domain (that is, a domain in which you‚Äôre developing new methods), you should describe the kinds of data that your methods are applicable to. For instance, if you‚Äôre developing methods for using convolutional neural networks with graphs, you should describe why graph-based data is useful in the real-world. | . | . Action Item Your Quarter 1 Project Checkpoint submission will consist of both a report submission and code submission. Your report submission for the checkpoint should contain a working title, abstract, and introduction section. Methods . This section often goes by different names, e.g. experimental design, and sometimes appears at the start of the ‚ÄúResults‚Äù section of a paper rather than as its own section (as we saw in the chart above). Regardless of its title, the purpose of this section is to describe the steps that you took to produce the results you‚Äôll discuss in the following section. It should contain enough details for a reader to be able to understand what you did, without containing so much detail that it distracts from the storyline ‚Äì leave ultra-fine details for the appendix. If your project involves developing multiple models that are very different, you may want to dedicate a separate section to each one. This may apply, for instance, if you used two different approaches to solve your overarching problem, or if you used different models to label data and to train a classifier. Results . In your results section, you should present data clearly without any interpretation. That is, readers of this section should be able to understand what you discovered, without having to read any conclusions that you made from those results. As mentioned in the Guidelines section, you should strive to create figures that are self-contained. This means using informative titles, labels, and captions ‚Äì don‚Äôt make readers guess anything. The contents of each figure should also be explained in writing. Make it clear in your text when the values and trends in a figure are particularly relevant to the exploration. Make sure to include hyperlinks in your text relevant figures (e.g. ‚Äúsee Figure 2‚Äù). Discussion . In the discussion section, you‚Äôll provide your interpretation of the results from the previous section. Here, you should describe how your results compare to prior work on the same problem. Are your results similar to what has been seen before? Are they significantly different? Why? . Be honest in describing the impact and applicability of your results, along with the limitations of your approach. There‚Äôs nothing wrong with your results having limitations; just be clear on what they are. Lastly, make sure to describe the possibilities for future work. How can someone else take your project and extend it even further? . ",
    "url": "/lessons/q1/03/#anatomy-of-a-scientific-paper",
    "relUrl": "/lessons/q1/03/#anatomy-of-a-scientific-paper"
  },"67": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Exercises",
    "content": "While there is no required ‚ÄúMethodology Assignment‚Äù, you will have to write the title, abstract, and introduction for your Quarter 1 Project and submit that as your checkpoint by the end of Week 5. As such, we‚Äôve provided a few exercises below that will help you understand the role of the introduction section in a paper. You do not need to submit your answers anywhere, but you should still do them. In an introduction, you need to give context as to why a problem is interesting. You must also clearly state the problem and scope in this context. In one of the papers in your domain, . | Specify the problem in concrete, testable terms and hypotheses. (To describe something in concrete, testable terms is to describe something in a way that is verifiable with math or code.) . | Discuss the broader applicability of the results in the paper ‚Äì what is the significance of the authors‚Äô findings, both in the specified domain and outside of it? . | Identify the most important figure/result in the results section of the paper, given the context provided in the introduction. | Why is this result the most important ‚Äì i.e., why is it the best summary of the approach the authors used to solve the problem? | Is this most important result mentioned in the introduction? (Hopefully, it is!) | . | . ",
    "url": "/lessons/q1/03/#exercises",
    "relUrl": "/lessons/q1/03/#exercises"
  },"68": {
    "doc": "Lesson 3 ‚Äì Scientific Writing",
    "title": "Lesson 3 ‚Äì Scientific Writing",
    "content": " ",
    "url": "/lessons/q1/03/",
    "relUrl": "/lessons/q1/03/"
  },"69": {
    "doc": "Lesson 4 ‚Äì Containerization with Docker",
    "title": "Lesson 4 ‚Äì Containerization with Docker",
    "content": "All lectures will be delivered as readings that you complete on your own time. Post questions with the lesson here. Make sure to read this article and complete the Action Items before moving on to Methodology Assignment 3. A recording of the lecture help session associated with this lecture can be found here. Reminders: . | The Quarter 1 Project Checkpoint is due on Sunday, October 30th. | Take a look at the new Resources tab of the course website. | . ",
    "url": "/lessons/q1/04/#lesson-4--containerization-with-docker",
    "relUrl": "/lessons/q1/04/#lesson-4--containerization-with-docker"
  },"70": {
    "doc": "Lesson 4 ‚Äì Containerization with Docker",
    "title": "Table of contents",
    "content": ". | Overview | Docker . | Overview | Installing Docker Locally | Using Images from Docker Hub | Dockerfiles | Creating Images | . | Additional Resources | . ",
    "url": "/lessons/q1/04/#table-of-contents",
    "relUrl": "/lessons/q1/04/#table-of-contents"
  },"71": {
    "doc": "Lesson 4 ‚Äì Containerization with Docker",
    "title": "Overview",
    "content": "At this point in your data science career, you‚Äôve likely run into one of the following scenarios: . | A project ran fine on your computer, but not on your colleague‚Äôs ‚Äì it either produced incorrect results, or resulted in errors, like ModuleNotFoundError: No module named 'numpy'. | When installing a package, you saw the message Incompatible library version: requires version a.b.c or later, but you currently have version x.y.z. When you fixed that, some other application broke. | You needed to run your code on a more powerful server (say, AWS), but you weren‚Äôt sure how to set up all the packages you needed on that server. | . There are a few solutions to this problem: . | Python virtual environments. A Python virtual environment is a combination of a Python version and libraries. Virtual environments are isolated, so when you ‚Äúactivate‚Äù one, the packages you install don‚Äôt affect the packages installed on your system or in other virtual environments. Python virtual environments are lightweight, but, as the name suggests, only work with Python. | Virtual machines. A virtual machine allows you to emulate another operating system on your own computer. Virtual machines are extremely customizable, as they essentially allow you to set up a new computer from scratch. However, they are very resource intensive. | . The above solutions have their tradeoffs. The solution we will use, Docker containers, strike a happy medium. They work with languages other than Python, and are much more lightweight than virtual machines. ",
    "url": "/lessons/q1/04/#overview",
    "relUrl": "/lessons/q1/04/#overview"
  },"72": {
    "doc": "Lesson 4 ‚Äì Containerization with Docker",
    "title": "Docker",
    "content": "Overview . Watch the video below for a high-level primer on what Docker is. In short, Docker provides you with a sandbox, in which you can run applications and install packages without impacting other parts of your computer. Specifically: . | A Docker image is a snapshot of a development environment. An image contains everything you need to run an application ‚Äì all dependencies, configuration, scripts, binaries, etc. | A container is created using an image. Once you launch a container, you are in the aforementioned sandbox. Per the Docker getting started guide, ‚Äúa container is simply another process on your machine that has been isolated from all other processes on the host machine.‚Äù | . Images and containers are closely related, but they‚Äôre not the same thing. Here‚Äôs an analogy: when Apple released iOS 16, they released an image. When you updated your iPhone to iOS 16 and started using it, you used Apple‚Äôs iOS 16 image to launch a container. This is an imperfect analogy, because images are not the same thing as operating systems, but it should hopefully clarify how images and containers are different. Read this article for more details. While this may be the first time you‚Äôve used Docker directly, it‚Äôs not the first time you‚Äôve used Docker. Each time you‚Äôve used DataHub or run a launch script on DSMLP, you‚Äôve indirectly specified a Docker image that you‚Äôd like to launch, and you‚Äôve done your work inside a Docker container! For instance, here is the Dockerfile that specifies the image that is used when you run launch-scipy-ml.sh on DSMLP. We‚Äôll learn more about Dockerfiles below, but for now, you‚Äôll note that the Dockerfile seems to be installing several Python packages for machine learning, like torch and tensorflow-gpu. Unsurprisingly, all large cloud compute providers (like AWS, GCP, and Azure) support containerized applications, and all support Docker. Remember, Docker containers are not virtual machines, though they work similarly in some ways. Instead, they run processes using the host computer‚Äôs kernel. It turns out that we can run multiple containers at a time on a single machine, each using the same or different images. Installing Docker Locally . Action Item To complete Methodology Assignment 3, and more generally to create your own Docker images, you‚Äôll need to install Docker Desktop, a client for macOS, Windows, and Linux, locally on your computer. While DSMLP works with Docker, it does not have Docker Desktop installed. | The video we had you watch earlier mentioned something called boot2docker. boot2docker is now deprecated and has been replaced with Docker Desktop. When you install Docker Desktop and pull an image, you essentially install the ability to run Linux-based applications, whether or not you have a Linux personal computer. Pretty cool, right! | When you download and launch Docker Desktop, it‚Äôll prompt you to complete a tutorial. It‚Äôs highly recommended that you do this! | Installing Docker and pulling existing images requires having 5-10GB of free space on your computer. If you don‚Äôt have this space available, you can request a DigitalOcean Docker Droplet, which will give you SSH access to a Linux VM with Docker installed. If you go this route, make sure to sign up for the GitHub Student Developer Pack which gives you a $100 DigitalOcean credit. (You could use other Linux-based VMs, like AWS, too.) | . Using Images from Docker Hub . Often, you‚Äôll find yourself working with images that already exist for your project. Much like source code is stored on GitHub, Docker images are stored on Docker Hub. At Docker Hub, you can browse through all publicly available Docker images. For instance, here is the base image that all other DataHub and DSMLP images are based off of. We‚Äôll build off of it in Methodology Assignment 3. Just like on GitHub, images can be public or private. Action Item Make a Docker Hub account. You‚Äôll need it, both for Methodology Assignment 3 and for your projects. When launching a container on DSMLP, you can specify an image from Docker Hub that you‚Äôd like to launch your container in. For instance, suppose we want to launch a container using the base data science image linked above. To do so, we need to find the path for the image. Images on Docker Hub have paths of the form &lt;user&gt;/&lt;image&gt;:&lt;tag&gt;. For this image, the user is ucsdets and the image is datahub-base-notebook. To find the tag we want to use, we can click ‚ÄúTags‚Äù to see a list. UCSD‚Äôs Educational Technology Services (ETS) tends to tag release versions of its images with ‚Äústable‚Äù, so upon searching for ‚Äústable‚Äù, we see a list of relevant tags. 2022.3-stable looks good. (You can see the stable releases of other images here.) . (Read more about tags here.) . To launch a container on DSMLP with a specified image, we run . launch.sh -i &lt;image_path&gt; . So for the purposes of this example, we‚Äôll run . launch.sh -i ucsdets/datahub-base-notebook:2022.3-stable . Great! Upon launch, we‚Äôll be placed in a container whose environment is specified by the image we used. In the future, when you create your own images and upload them to Docker Hub, you‚Äôll launch servers on DSMLP with the path to your image, instead. Dockerfiles . Pre-existing images are great, but often you‚Äôll need to create your own image, customized for your project. Images are designed to be layered. That is, I can start with an existing layer and specify what I want to add on top of that layer (packages, languages, files, etc). The existing layer that I started with was itself likely layered upon other pre-existing images. If we continue up the hierarchy, the very first layer that our layer inherits from must have specified an operating system to use ‚Äì we will exclusively work with Linux distributions; Ubuntu is quite common. (Note that you don‚Äôt need a Linux computer to build a Linux image!) . How does one specify what components to include in an image? By writing a Dockerfile. A Dockerfile is a plain text file that contains a sequence of steps that one can use to recreate your development environment. To create an image, you build a Dockerfile. In keeping with the iOS 16 example from earlier, if Apple‚Äôs release version of iOS 16 is an image and the copy of it running on my iPhone is a container, then the Dockerfile is the source code Apple wrote to create iOS 16. (This diagram was taken from another great video about Docker.) Let‚Äôs look at a very basic example. FROM ucsdets/datahub-base-notebook USER root RUN conda install --quiet --yes geopandas . Yes, this is an entire Dockerfile! . | The first line specifies that we want to start by adopting the ucsdets/datahub-base-notebook image that we looked at earlier. Everything that is part of ucsdets/datahub-base-notebook will be included in our new image, too. | The next line specifies that we want to run all subsequent commands as the root (administrator) on the computer. | The next line installs geopandas using conda. Note: this requires conda to be installed in the image. If it‚Äôs not, this will error! | . A similar-looking Dockerfile can be found here; it is the Dockerfile for the DSC 10 image on DataHub. ARG BASE_CONTAINER=ucsdets/datascience-notebook:2022.3-stable FROM $BASE_CONTAINER USER root RUN pip install coverage==5.5 RUN pip install 'pandas&gt;=0.24' babypandas==0.1.7 pandas-tutor==2.0.3 RUN pip install otter-grader==3.3.0 USER $NB_UID . It‚Äôs starting from a base image maintained by UCSD ETS (though not the same one as we looked at above), and installing the Python packages needed for DSC 10. A more sophisticated Dockerfile might look like the following (taken from Aaron Fraenkel‚Äôs malware domain): . FROM ucsdets/scipy-ml-notebook USER root RUN apt-get update &amp;&amp; \\ apt-get upgrade -y &amp;&amp; \\ apt-get install -y default-jre &amp;&amp; \\ apt-get install -y default-jdk ENV APK_SCRIPT https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool ENV APK_JAR https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.4.1.jar RUN mkdir -p /usr/local/bin RUN P=/tmp/$(basename $APK_SCRIPT) &amp;&amp; \\ wget -q -O $P $APK_SCRIPT &amp;&amp; \\ chmod +x $P &amp;&amp; \\ mv $P /usr/local/bin RUN P=/tmp/$(basename $APK_JAR) &amp;&amp; \\ wget -q -O $P $APK_JAR &amp;&amp; \\ chmod +x $P &amp;&amp; \\ mv $P /usr/local/bin/apktool.jar . While this seems complicated, all it‚Äôs doing is: . | Using apt-get, a package manager on Ubuntu, to install the default Java runtime environment and development kit | Defining two environment variables | Creating a path to place files in | Downloading a few scripts from online and placing them in the specified path | . While Dockerfiles can get quickly get complicated, note that you only need to specify what you want to include in your image on top of an existing image. You will almost always start by using one of the images pre-configured by UCSD ETS as a base image. For a full reference of all the commands that Dockerfiles understand, look here. Note: Dockerfiles must be named Dockerfile with no extension. Otherwise, Docker Desktop won‚Äôt recognize them when you try to build your image. Creating Images . Now that you know what Dockerfiles do, you may be wondering how to use them to create images and actually run code. This tutorial, prepared by UCSD ETS (and, more specifically, a past methodology TA), walks through exactly how to do that. In Methodology Assignment 3, we will have you follow a subset of the instructions in the tutorial. Here‚Äôs what we recommend: . | First, complete the tasks labeled Action Item in this lesson. | Then, skim through the instructions in the tutorial so that you know what is involved. | Then, work through Methodology Assignment 3, referring to the tutorial and this lecture as necessary. | . Note: Under Step 2 of the tutorial, follow Option 1. ",
    "url": "/lessons/q1/04/#docker",
    "relUrl": "/lessons/q1/04/#docker"
  },"73": {
    "doc": "Lesson 4 ‚Äì Containerization with Docker",
    "title": "Additional Resources",
    "content": ". | Docker and DSMLP tutorial | Docker official getting started tutorial | Dockerfile instructions | Launching containers on DataHub with Custom Images | How does Docker run Linux kernels on non-Linux machines? . | Read about how this was implemented by a Docker engineer. | . | StackOverflow: What‚Äôs the difference between Docker and Python virtualenv? | . ",
    "url": "/lessons/q1/04/#additional-resources",
    "relUrl": "/lessons/q1/04/#additional-resources"
  },"74": {
    "doc": "Lesson 4 ‚Äì Containerization with Docker",
    "title": "Lesson 4 ‚Äì Containerization with Docker",
    "content": " ",
    "url": "/lessons/q1/04/",
    "relUrl": "/lessons/q1/04/"
  },"75": {
    "doc": "Lesson 2 ‚Äì Project Organization",
    "title": "Lesson 2 ‚Äì Project Organization",
    "content": "All lectures will be delivered as readings that you complete on your own time. Post questions with the lesson here. Make sure to read this article before moving on to Methodology Assignment 2. Note: Take a look at the new Resources tab of the course website. ",
    "url": "/lessons/q1/02/#lesson-2--project-organization",
    "relUrl": "/lessons/q1/02/#lesson-2--project-organization"
  },"76": {
    "doc": "Lesson 2 ‚Äì Project Organization",
    "title": "Table of contents",
    "content": ". | Goals of Data Science Software Development . | Overview | Managing Project Components | . | The Anatomy of a Data Science Project . | Domain Research | Question / Hypothesis | Data ETL (extract, transform, load) | Model Building | Continued Prediction | Conclusions and Reports | Summary | Caveat: Methods-Focused Projects | . | An Initial Template for Data Science Projects . | Configuration vs. Code | A Simple Template | A Simple Example . | README.md | etl.py | data-params.json | run.py | . | . | A Final Template . | Overview | The Template . | data | notebooks | requirements.txt | . | Examples | . | . ",
    "url": "/lessons/q1/02/#table-of-contents",
    "relUrl": "/lessons/q1/02/#table-of-contents"
  },"77": {
    "doc": "Lesson 2 ‚Äì Project Organization",
    "title": "Goals of Data Science Software Development",
    "content": "Overview . At a high level, the data science lifecycle looks a lot like the scientific method you saw in elementary school. While you may begin with a single question, after performing exploratory data analysis and building a model to answer your question, you will likely refine your original question or come up with more questions to investigate. As a result, the code that you write needs to be written so that it can support iteratively changing questions and analyses. Specifically, the code for a data science project needs to be: . | Flexibly written, to adapt to changing questions. | Clearly documented, so that is clear ‚Äì both to you and others using your code ‚Äì what each piece does. | Reproducible, meaning that others should be able to run it themselves. | . In theory, that sounds pretty straightforward. However, as you saw in DSC 80, the real data science lifecycle is anything but. This makes it even more crucial that you follow the three principles outlined above. If you‚Äôre not careful, it‚Äôs easy to fall in the trap of writing poorly organized code with many hard-coded pieces. This results in: . | Being able to execute fewer iterations of your project, and as a result, making slower progress on your project. | Being unsure of what your code is even doing, increasing the likelihood of making mistakes while iterating and making it unclear what your conclusions even are. | Making it less likely that others will be able to use and replicate the results of your project, resulting in your project fading into obscurity. | . The purpose of this lesson is to show you how to adhere to the three principles mentioned above, as this will increase your chances of successfully executing your project. The contents of this lesson will be relevant for the remainder of the capstone sequence; you will find yourself coming back to it often in the future. Managing Project Components . There are a plethora of tools used in industry for managing data science projects, far too many for us to make a dent in them in this course. Instead, we will expose you to a few popular tools that help solve core issues that will be relevant even decades in the future, once the current slate of tools is replaced. A small sample of tools that exist for managing data science projects. These core issues revolve around the fact that your project will be made up of several components. For instance, you may have separate components for ingesting and cleaning raw data, creating visualizations, and training models. Issues you need to be aware of are: . | Communication: How do these components all communicate with one another? In other words, what are the inputs and outputs of each component? It‚Äôs important to be clear about what these are up front, to avoid confusion later on. | Isolation: Your code should be written in a way such that each component is as isolated as possible. This way, when you want to make changes to one component ‚Äì say, loading in another column at the very start of your pipeline ‚Äì you don‚Äôt have to make changes to all of your other components. This may happen if you have aspects of your modeling pipeline, like feature names, hard-coded throughout several different files. (It would suck to have to buy a new dashboard for your car every time you get a flat tire ‚Äì the same principle applies here.) | Parallelization and Scale: It should be clear when each part of your project needs to be run, and whether different parts can be run in parallel. Similarly, it should be clear which components of your project will need to scale as the project grows in scope ‚Äì for instance, if you collect 10x more data, at what stages will you need more compute resources? | . One way we will address all of these issues is through the use of configuration files, in which you can specify and track hypotheses and desired outputs. As such, when new questions arise, you won‚Äôt have to re-write your code; instead, you‚Äôll just run it with different configurations. ",
    "url": "/lessons/q1/02/#goals-of-data-science-software-development",
    "relUrl": "/lessons/q1/02/#goals-of-data-science-software-development"
  },"78": {
    "doc": "Lesson 2 ‚Äì Project Organization",
    "title": "The Anatomy of a Data Science Project",
    "content": "Let‚Äôs look at how each component of the data science lifecycle interacts with your code. Domain Research . The code you write throughout your project will strongly depend on your domain. For instance, suppose you‚Äôre working with driver data. In your data cleaning step, you may choose to keep only the drivers whose ages are at least 16, the legal driving age in California. This is a choice you had to make given your knowledge of your domain. You‚Äôll make several such design decisions while working on your project: . | You may clean your data in a specific way. | You may choose a particular column as a ‚Äútarget,‚Äù and a subset of the remaining columns for features. | You may build certain kinds of models over others. | . It‚Äôs important to document these choices and the context between them. This justification will appear in two places: . | In your final reports. For instance, in the EDA section of your report, you‚Äôd talk about what steps you took to clean your data and why they make sense. | In code comments, whenever relevant. Take the drivers‚Äô age example, for instance. In the line where you keep only the drivers who are at least 16, you may add # legal driving age. | . Question / Hypothesis . You may start with an initial question to investigate, but as your project evolves, so will the questions you‚Äôre interested in. To prevent having to re-write your codebase each time you come up with a new question, you should think about how your questions will be similar to one another so that you can parameterize your code. Here‚Äôs an example. Suppose you‚Äôre looking at traffic stops data, and you‚Äôre interested in whether ‚Äúyounger‚Äù people (&lt; 30 years old) are stopped at higher rates than ‚Äúolder‚Äù people (&gt;= 30 years old). Suppose you‚Äôre also interested in answering this question across multiple years ‚Äì say, for each year from 2016 through 2022 ‚Äì and across multiple counties in California. The most straightforward approach here is to create functions that take in year and county as input and return just the data needed to look at stop rates for that combination of year and county. Then, in a configuration file, you can store all years and counties that you‚Äôre interested in. Finally, you can call your data processing and hypothesis testing routines on all combinations of parameters in your configuration file. Note that in this approach, each combination of parameters leads to a different question / hypothesis. One of the benefits of using configuration files, in addition to keeping your code robust and flexible, is that we can tell a server to run our pipeline for different combinations of parameters on different threads or machines, so that we can conduct our investigations in parallel. For instance, suppose there are 7 years (2016-2022, including both endpoints) and 3 counties (San Diego County, Orange County, and Los Angeles County) that we‚Äôre interested in investigating. There are \\(7 \\cdot 3 = 21\\) combinations of year and county ‚Äì wouldn‚Äôt it be great if we could run our code for all 21 combinations at the same time? . If some aspect of your question is never going to change, e.g. if you‚Äôre always only going to be looking at San Diego County, then it‚Äôs fine to hard-code that throughout your codebase. However, it‚Äôs generally a good idea to parameterize any aspects of your codebase that could change to keep it adaptable to new questions. In this course, we will typically store our configuration files in the JSON format, though there are a variety of other possible formats (YAML is popular, as are INI and CFG). You‚Äôll see example configuration files later on in the lesson. Data ETL (extract, transform, load) . As your project evolves, the data that you‚Äôre working with may also change. For instance, the source where you‚Äôre pulling traffic stops data from may update daily with the previous day‚Äôs stop data. You need to make sure that your modeling component doesn‚Äôt break just because we pulled in a new day‚Äôs worth of data, or because an additional column was added from the data source. Of course, your code doesn‚Äôt have to handle all possible data sources, but you should anticipate possible changes and prepare for them. Here, configuration files will again be useful. For instance, you should explicitly mention which columns you want to use for transformations and model building, so that any new columns that are added in don‚Äôt impact your model. You should also think about how you‚Äôre accessing your data ‚Äì an API? scraping? found a CSV online? ‚Äì and where you‚Äôre storing it. To prevent having to re-pull your data each time your cleaning and transformation logic changes, separate the code you use for data ingestion from the code you use for cleaning and transformation, and store intermediate ‚Äúraw‚Äù data to disk that you can re-use whenever you update your cleaning logic. Model Building . As you‚Äôve seen in earlier courses, the model building process is not straightforward ‚Äì you‚Äôll repeatedly try different combinations models and parameters until you feel that your model has sufficient generalizability to unseen data. Continuing with the theme of parametrization, it‚Äôs a good idea to store all ‚Äúpotential‚Äù parameters in configuration files, so that models can be trained and evaulated on different combinations in parallel. Furthermore, it‚Äôs encouraged to use frameworks that enable ‚Äúpipelining‚Äù, like sklearn, which you were exposed to in DSC 80. Continued Prediction . Often times, your project lives on well after you‚Äôve built your ‚Äúfinal‚Äù model. Your model may be deployed into production to make ‚Äúlive‚Äù predictions ‚Äì for instance, each time you request a ride in the Uber app, it predicts the highest price you‚Äôll pay for a ride. The model.predict method that you‚Äôd use to make predictions in sklearn may actually be called via HTTP requests on a site that uses a Java backend. Once this happens, you may want to keep track of how well your model is performing ‚Äì are its outputs still reasonable? Is it easy to re-train it to reflect updated data? . The use of pre-trained models, particularly in the case of deep neural networks, is quite popular today. For instance, you can easily use OpenAI‚Äôs GPT-3 language model without having to train it yourself. You should strive to build a model that you can similarly share with others, in the form of a Python package or a Docker container. That way, others can easily use your model to make predictions without having to run your entire pipeline. Conclusions and Reports . The final reports that you create will be written in some sort of markup language, like Markdown, and will explain your results and contain justification for all of the design decisions you made. Your reports will likely involve tables and visualizations that are derived from data. You should try to set up your report such that it automatically generates tables and visualizations using the other components of your project, so that if, say, your data is updated, you can update your report just by re-running your entire pipeline. This, of course, is not possible if your report includes screenshots from other parts of your project; instead, you‚Äôll need to programmatically create, save, and load images. Summary . In short, your projects should be: . | Flexible for quick iterations, through configuration files. | Understandable through consumers of the output, through documentation and reports. | Usable for developers and researchers extending your work, through documentation and containerization. | . Caveat: Methods-Focused Projects . You may wonder how much of this is applicable to you if your project doesn‚Äôt involve data analysis. Indeed, many domains are more methods-focused, where they spend time developing new techniques for collecting or modelling data rather than the entire lifecycle. If this is the case, in addition to following general best practices for software development in your domain, you will still have a data analysis portion in your project, if only to demonstrate the usage and value of whatever it is you developed. You may have two repositories, one for the software package you develop and one for your ‚Äúexample‚Äù analysis (the former of which will be much larger). ",
    "url": "/lessons/q1/02/#the-anatomy-of-a-data-science-project",
    "relUrl": "/lessons/q1/02/#the-anatomy-of-a-data-science-project"
  },"79": {
    "doc": "Lesson 2 ‚Äì Project Organization",
    "title": "An Initial Template for Data Science Projects",
    "content": "Now that you understand how each step of the data science lifecycle plays a role in your project‚Äôs structure, let‚Äôs tangibly look at how you might structure your project. Configuration vs. Code . Up until now in this lesson, we‚Äôve repeatedly emphasized the use of configuration files for storing parameters. However, it‚Äôs not immediately obvious what parts of your pipeline belong in code and what parts belong in configuration files. Code that is used by other processes is called library code, or source code. Your source code may be run in notebooks that you use for EDA and for creating visualizations, and will certainly be run in your final run.py file that runs your entire pipeline. Source code will mostly be contained in .py files (or .java or .cpp files, for example). You are already used to using generic functions from libraries like pandas and numpy; the only difference here is that you are writing these functions yourself. Configuration files, then, consist of parameters that your source code will use as inputs. For the most part, you will write configuration files in .json, but you could also store configurations as global variables at the top of your scripts. Aim to generalize, but don‚Äôt overly generalize. It‚Äôs fine to start writing code with some inputs ‚Äúhard-coded‚Äù, e.g. write filtering logic that creates a DataFrame of traffic stops in 2021 in Orange County, but at some point you should step back and generalize. A Simple Template . Here‚Äôs a basic ‚Äútemplate.‚Äù . Project ‚îú‚îÄ‚îÄ code.py ‚îú‚îÄ‚îÄ config.json ‚îî‚îÄ‚îÄ script.py . Note that this example directory shows 3 files that are all in the same folder. Shortly, we will see more realistic example templates with multiple directories. Specifically: . | code.py contains library code ‚Äì that is, functions designed to execute your project. These functions should be parameterized to accept various inputs. | config.json contains parameters for the functions in code.py. | script.py imports code, loads config.json, and calls functions from the code module. (Note that this could also be a notebook, script.ipynb.) | . For instance, script.py may contain: . import code with open('config.json', 'r') as fh: params = json.load(fh) code.run_process(**params) . We will use the process above repeatedly. (Aside: The ** operator above unpacks the entries of the params dictionary, so that they are all passed directly as inputs to code.run_process. As a crude example, if f = lambda x, y: x + y, then f(**{'x': 2, 'y': 3}) evaluates to 5. Read here for more.) . A Simple Example . Let‚Äôs see how we might tangibly use the example template from above. Suppose we have code that pulls data from an API, and that the data is updated daily. We want to re-run this code regularly to update our stored data. Our project may be structured as follows: . Project ‚îú‚îÄ‚îÄ README.md ‚îú‚îÄ‚îÄ data-params.json ‚îú‚îÄ‚îÄ etl.py ‚îî‚îÄ‚îÄ run.py . Let‚Äôs look at each piece in detail. README.md . All repositories you create should have README files that describe what is located where and how to run your project. etl.py . etl.py contains our source code (i.e. it corresponds to code.py from the template). The functions written here are generic, and will be used throughout the rest of the project. Note that users of the code in etl.py (e.g. other people running your project who will just run python run.py) should not need to know how the code in etl.py works in order to use it. You probably don‚Äôt know how pd.pivot_table works under the hood, but you still use it ‚Äì the same idea applies here. However, developers who want to extend your project will have to understand how the code in etl.py works, and for that reason it still needs to be well-documented. Your library code will not know who is going to call it, and for what purpose ‚Äì the calling is done in run.py, using the parameters in data-params.json. Here‚Äôs an example of what etl.py might look like. ''' etl.py contains functions used to download DataFrames containing traffic stops data for different years and counties. ''' def get_year_and_county(year, county): ''' Return a DataFrame of traffic stops data for a given year and county. ''' ... return ... def get_data(years, counties, outpath): ''' Downloads DataFrames and saves them as CSVs at the specified output directory for the given years and counties. :param: years: a list of years to collect :param: teams: a list of counties to collect :param: outpath: the directory in which to save the data. ''' for year in years: for county in counties: data = get_year_and_county(year, county) data.to_csv(os.path.join(outpath, f'{year}-{county}.csv')) return . Note that the functions above are well-documented. In a notebook, after running import etl, I could run etl.get_data? and see an explanation of what get_data does. data-params.json . Earlier, we used the example of wanting to pull traffic stops data for every combination of year between 2016 and 2022 and county from San Diego County, Orange County, and Los Angeles County. To do so, we can call the get_data function in etl.py with appropriate years and teams lists. data-params.json is the right place to store those lists. { \"years\": [2016, 2017, 2018, 2019, 2020, 2021, 2022], \"counties\": [\"San Diego County\", \"Orange County\", \"Los Angeles County\"], \"outpath\": \"data/raw\" } . Note that you don‚Äôt need to know how the code in either etl.py or run.py works to specify parameters. All you need to do to pull new data is update the lists here. Also note that you can create multiple configuration files to keep a ‚Äúrecord‚Äù of different parameters you‚Äôve tried. run.py . This script puts everything together. It will import the code in etl and run it on the parameters in data-params.json. Note that it also serves as an example of how to use the functions in etl.py, for those who may not be familiar with how they work. There are other tools that exist for writing build scripts ‚Äì for instance, you may have heard of Makefiles. However, we will stick with writing Python files, as they are sufficient for our purposes. Here‚Äôs an example of what run.py might look like. #!/usr/bin/env python import sys import json from etl import get_data def main(targets): if 'data' in targets: with open('data-params.json') as fh: data_params = json.load(fh) get_data(**data_params) if __name__ == '__main__': targets = sys.argv[1:] main(targets) . Note: . | The line at the top, #!/usr/bin/env python, is known as the ‚Äúshebang.‚Äù It tells bash which Python installation to use (here, we specified our user‚Äôs default Python). | The get_data function from etl is imported. | __name__ == '__main__' only evaluates to True when run.py is run as a script from the command-line. | sys.argv is a list of the arguments provided on the command-line when run.py is called. For instance, if we call python run.py data dog zebra, sys.argv is ['run.py', 'data', 'dog', 'zebra'], and hence sys.argv[1:] is ['data', 'dog', 'zebra']. | Our main function runs get_data from etl using the parameters in data-params.json only if data is one of the command-line arguments called with python run.py. | . | . ",
    "url": "/lessons/q1/02/#an-initial-template-for-data-science-projects",
    "relUrl": "/lessons/q1/02/#an-initial-template-for-data-science-projects"
  },"80": {
    "doc": "Lesson 2 ‚Äì Project Organization",
    "title": "A Final Template",
    "content": "Overview . Hopefully the example above got you to think about what should be stored where. However, it is far too simplistic to be realistic ‚Äì even modest projects will outgrow the previously provided template. In practice, your repositories will consist of several directories. We‚Äôve all written notebooks with uninsightful names, like Untitled4-Copy1.ipynb, that are impossible to run linearly because we wrote the code out-of-order. When working in such a notebook, especially one that you didn‚Äôt write yourself, it can be frustrating to try and figure out what order to run the code in the notebook in. To avoid this problem altogether, you should strive to regularly move your code from notebooks to source code files when appropriate. The Template . We‚Äôre not talking about bikeshedding the indentation aesthetics or pedantic formatting standards ‚Äì ultimately, data science code quality is about correctness and reproducibility. (source) . By sticking to a strict template, you‚Äôre more likely to follow software development best practices and, as a result, produce methods and analyses that are more likely to be ‚Äúcorrect.‚Äù In this class, we will largely follow a repository template outlined by the folks at Cookie Cutter Data Science, who describe their template as ‚ÄúA logical, reasonably standardized, but flexible project structure for doing and sharing data science work. Project ‚îú‚îÄ‚îÄ .gitignore &lt;- Files to keep out of version control (e.g. data/binaries). ‚îú‚îÄ‚îÄ run.py &lt;- run.py with calls to functions in src. ‚îú‚îÄ‚îÄ README.md &lt;- The top-level README for developers using this project. ‚îú‚îÄ‚îÄ data ‚îÇ ‚îú‚îÄ‚îÄ temp &lt;- Intermediate data that has been transformed. ‚îÇ ‚îú‚îÄ‚îÄ out &lt;- The final, canonical data sets for modeling. ‚îÇ ‚îî‚îÄ‚îÄ raw &lt;- The original, immutable data dump. ‚îú‚îÄ‚îÄ notebooks &lt;- Jupyter notebooks (presentation only). ‚îú‚îÄ‚îÄ references &lt;- Data dictionaries, explanatory materials. ‚îú‚îÄ‚îÄ requirements.txt &lt;- For reproducing the analysis environment, e.g. ‚îÇ generated with `pip freeze &gt; requirements.txt` ‚îú‚îÄ‚îÄ src &lt;- Source code for use in this project. ‚îú‚îÄ‚îÄ data &lt;- Scripts to download or generate data. ‚îÇ ‚îî‚îÄ‚îÄ make_dataset.py ‚îú‚îÄ‚îÄ features &lt;- Scripts to turn raw data into features for modeling. ‚îÇ ‚îî‚îÄ‚îÄ build_features.py ‚îú‚îÄ‚îÄ models &lt;- Scripts to train models and make predictions. ‚îÇ ‚îú‚îÄ‚îÄ predict_model.py ‚îÇ ‚îî‚îÄ‚îÄ train_model.py ‚îî‚îÄ‚îÄ visualization &lt;- Scripts to create exploratory and results-oriented viz. ‚îî‚îÄ‚îÄ visualize.py . Let‚Äôs take a closer look at a few of the components of this template. data . ‚îú‚îÄ‚îÄ data ‚îÇ ‚îú‚îÄ‚îÄ temp &lt;- Intermediate data that has been transformed. ‚îÇ ‚îú‚îÄ‚îÄ out &lt;- The final, canonical data sets for modeling. ‚îÇ ‚îî‚îÄ‚îÄ raw &lt;- The original, immutable data dump. Note that all of your results are derived from raw data, i.e. the contents in data/raw. Never edit this raw data, so that you always have the option of ‚Äúundoing‚Äù parts of your project. Ideally, store raw data such that it is read-only (this is an option on, say, DSMLP). Since raw data never changes, it should not be included in version control. And since transformed data is generated by running source code on the raw data, transformed data should not be included in version control either. As a result, you should add data/ to your .gitignore. Ultimately, you should be able to re-create the final outputs of your pipeline given just the raw data. notebooks . ‚îú‚îÄ‚îÄ notebooks &lt;- Jupyter notebooks (presentation only). Notebooks are meant for analysis and communication, not for storing source code. The majority of your notebooks should be made up of Markdown and visualization; there should be very little code, and most of the code there should consist of calls to the functions in your source code. Whenever you‚Äôve written code that should be included in version control, move it to your source code files. It‚Äôs worth mentioning that the default notebook names (like Untitled4-Copy1.ipynb, for instance) are not very descriptive ‚Äì instead, give your notebooks meaningful titles, like 03-rampure-prelim-EDA.ipynb. requirements.txt . ‚îú‚îÄ‚îÄ requirements.txt &lt;- For reproducing the analysis environment, e.g. generated with `pip freeze &gt; requirements.txt` . If I want to run your project from scratch, in addition to all of your code, I need to know which Python packages (and which versions) to install. The easiest way to communicate this information to others is through a requirements.txt file that contains all Python libraries that were used in your project. To create such a file, run pip freeze &gt; requirements.txt in your project repository. In the coming weeks, we‚Äôll learn how to containerize an entire environment (i.e. more than just Python packages) to distrbute to others. Examples . Several realistic examples that follow this general structure can be found in this repository. Note that they don‚Äôt all follow the template exactly; you‚Äôre free to make changes to best suit your projects, but should generally follow the spirit of the template. Your code throughout the capstone program (including in Methodology Assignment 2) will be graded on how closely it adheres to this structure! . ",
    "url": "/lessons/q1/02/#a-final-template",
    "relUrl": "/lessons/q1/02/#a-final-template"
  },"81": {
    "doc": "Lesson 2 ‚Äì Project Organization",
    "title": "Lesson 2 ‚Äì Project Organization",
    "content": " ",
    "url": "/lessons/q1/02/",
    "relUrl": "/lessons/q1/02/"
  },"82": {
    "doc": "Lesson 0 ‚Äì Introduction",
    "title": "Lesson 0 ‚Äì Introduction",
    "content": " ",
    "url": "/lessons/q1/00/",
    "relUrl": "/lessons/q1/00/"
  },"83": {
    "doc": "Lesson 0 ‚Äì Introduction",
    "title": "DSC 180A, Fall 2022",
    "content": "Suraj Rampure . Agenda . | Introductions. | Capstone program overview. | Syllabus and logistics. | . Suraj Rampure (call me ‚Äúsoo-rudge‚Äù) . | Originally from Windsor, ON, Canada üá®üá¶. | BS (‚Äô20) and MS (‚Äô21) in Electrical Engineering and Computer Sciences from UC Berkeley üêª. | Second year teaching Data Science at UCSD. | So far, taught DSC 10, 40A, 80, and 90. | Also teaching DSC 10 this year. | . | Outside the classroom: watching basketball, traveling, learning to cook, watching TikTok, FaceTiming my dog üê∂, etc. | Not Aaron Fraenkel, who designed the capstone sequence. | . | | | . _My summer._ . Course staff . In addition, we have 7 teaching assistants, who will grade parts of your work and guide you through your projects. | Keng-Chi Chiang (Political Science PhD student, prior capstone TA) | Praveen Nair (CSE MS student, prior DSC undergrad) | Teresa Rexin (Statistics MS student, prior capstone TA) | Samanvitha Sateesha (CSE MS student) | Umesh Singla (CSE MS student) | Yuyao Wang (Math PhD student) | Xinrui Zhang (CSE MS student, prior DSC undergrad and capstone TA) | . See their individual expertise at dsc-capstone.github.io/staff. ",
    "url": "/lessons/q1/00/#dsc-180a-fall-2022",
    "relUrl": "/lessons/q1/00/#dsc-180a-fall-2022"
  },"84": {
    "doc": "Lesson 0 ‚Äì Introduction",
    "title": "Capstone program overview",
    "content": ". Capstone program goals . By the end of the capstone program, you will apply data science skills through the lifecycle of a two-quarter project. Specifically, you will: . | Learn methodological best practices for working on large projects. Specifically, you will have learned about: . | Reproducible work. | Effective (visual, oral) communication of work and results. | . | Learn how to start an investigation with a question instead of a method. | Complete a detail-oriented pursuit of a proposal in your chosen domain. | Produce and show off work that you are proud of! | . Capstone challenges . By the numbers, we have a huge capstone program: 203 students, 34 domains, and 50 mentors + liaisons. This invites some unique challenges: . | Topical variety: mentors have varying research interests, and as such, projects can span almost anything imaginable. | Evaluation: how do we consistently evaluate such varied student work? | Flipped background: in a typical capstone program, students come in with domain knowledge. In our program, students come in with a methodological toolkit, but no domain knowledge. | . These challenges motivate the structure of the program! . Structure of the capstone program . Mentors are responsible for sponsoring a ‚Äúdomain‚Äù that can sponsor multiple projects. Students enroll in domains based on their interests. | Quarter | Domain | Methodology | . | 1 | Getting up to speed in domain by working on a replication project (Quarter 1 Project) | Software development, reproducibility, environment independence | . | 2 | Working on an original project (Quarter 2 Project) | Project management, effective communication skills | . Domain . | In Quarter 1, you will focus on learning a domain. | Each week, your mentor will assign you tasks and readings. | At the end of the quarter, you will: . | Use these tasks to complete your Quarter 1 Project, in which you will have replicated a known result. | Propose a more independent Quarter 2 Project in groups. The Quarter 2 Project is the real capstone project! | . | In Quarter 2, you will spend most of your time executing your Quarter 2 Project. | . Methodology . | The methodology portion of the course teaches best practices for data science projects across a wide variety of domains: . | Responsible resource usage (remote vs. local development). | Reproducible research (Git, Docker, Python packages, updateable reports and notebooks). | Effective communication (scientific writing, oral presentations, teamwork). | . | You will directly the standards you learn about in the methodology component in your domain work. | The code you write in your projects will be graded against these standards. | You will analyze the writing of a publication in your domain using these standards. | . | . ",
    "url": "/lessons/q1/00/#capstone-program-overview",
    "relUrl": "/lessons/q1/00/#capstone-program-overview"
  },"85": {
    "doc": "Lesson 0 ‚Äì Introduction",
    "title": "Syllabus and logistics",
    "content": ". Course website . Bookmark it! . dsc-capstone.github.io . This is where all methodology content and assignment descriptions live. Make sure to read the Syllabus! . Technology . | EdStem: Q&amp;A forum for methodology. | Make sure you‚Äôre active here, since this is where all course-wide announcements will be made. | Your domain mentor will let you know how they want to communicate with you, but it won‚Äôt be through EdStem. | . | Gradescope: where all assignments will be submitted. | DSMLP: campus computing server (similar to DataHub). More on this soon. | No Canvas! ‚ùå | . Discussion sections . | Discussion section is where you meet with your mentor each week. | See here for the schedule. If in SDSC, see here for the code. | . | Attendance is mandatory, and you must come to discussion section prepared to discuss the tasks and readings they‚Äôve assigned you! | Discussions are for: . | Asking questions to understand data generating processes and domain-specific methods. | Brainstorming possible Quarter 2 Project proposals with peers. | . | Unless they are domain specific, don‚Äôt ask ‚Äútech support‚Äù questions in discussion ‚Äì save those for methodology office hours (more on those soon). | . Mentor interactions . | Expect your weekly work to be difficult. Your mentors are there to help ‚Äì ask lots of questions! | Mentors will each hold at least one office hour per week (either regularly scheduled or by appointment). | If they haven‚Äôt listed them here, ask them for the schedule in your first meeting. | You should attend these at least three times throughout the quarter. | . | Mentors largely operate unaware of how the lecture portion is structured. Give them context, if asking them a question about the domain that relates to lecture! . | If they ever give you instructions on an assignment that contradict our instructions, listen to them (unless something is dramatically different, in which case, let me know). | . | . Participation (10%) . | In total, domain participation amounts to 10% of your grade. | 5% of this comes from weekly participation questions that you must submit answers to 24 hours before your discussion section. | Your mentor may come up with custom questions for you to answer; otherwise, you should answer the default questions posted on the course website. | Answering these before section is crucial for preparing both you and your mentor for section. | These are in addition to any tasks and readings they assign you, which you won‚Äôt necessarily submit anywhere. | . | The other 5% comes from an overall participation grade that your mentor will assign you at the end of the quarter. | Participation in discussion section is required! | . | . Quarter 1 Project (70%) . | Your Quarter 1 Project will be a report that summarizes the work you‚Äôve done in learning your domain. You‚Äôll work on it either individually or in groups, depending on your mentor‚Äôs preferences. | Part 1 (Checkpoint, due Week 5): . | Report: introduction to problem, description of data and/or methods. | Code: data processing, initial method implementation. | . | Part 2 (Final, due Week 10): . | Report: results, discussion of shortcomings and possible improvements | Code: code that produces the results, using best practices. | . | The finalized Quarter 1 Project spec will be posted in ~2 weeks, but it won‚Äôt change much from the one currently linked in the syllabus. | . Quarter 2 Project Proposal (15%) . | Each Quarter 2 Project is worked on in groups of 2-4. It‚Äôs up to your mentor to choose the groups. You‚Äôll submit your proposal with the same group. | Deliverables for the proposal include: . | A written proposal, containing background research. | A plan/schedule for execution. | A 2-3 minute elevator pitch, aimed at a general audience. | A skeleton for the project (i.e. a GitHub repo with boilerplate). | . | You domain mentor will approve your proposal, based on their expertise and flexibility. | Sticking close to your work in Quarter 1 will allow you to move faster in Quarter 2. | The finalized Quarter 2 Project Proposal spec will be posted in ~4 weeks, but it won‚Äôt change much from the one currently linked in the syllabus. | . Quarter 2 Projects . | At the end of Quarter 2, you will submit: . | A public GitHub following best practices for data science project development (a developer should be able to extend your work from this code). | A public website explaining the project to a specific audience. | A PDF report, following best practices in scientific writing. | An elevator pitch (e.g. helpful in job interviews). | A longer slide-based talk. | . | See last year‚Äôs Quarter 2 Projects here. | . Methodology lectures . | Methodology lectures will be delivered asynchronously in the form of a reading. | There is a methodology lesson for today, too ‚Äì more on this soon. | . | Each Sunday, a new ‚Äúlesson website‚Äù will be posted on the course homepage. Read through the lesson article when it‚Äôs released. | The live lecture time ‚Äì Monday 3-3:50PM and 4-4:50PM ‚Äì will be used to provide you help with the lesson. You can attend either one. | They will be recorded (though it‚Äôs not clear how useful the recordings will be). | . | Advice: treat the lecture help sessions as lab time ‚Äì come here to do the readings, and ask questions as they come up. | . Methodology assignments (5%) . | There are 5 methodology assignments, each of which is associated with a methodology lecture. | Example: access campus computing servers. | Example: create a Docker container for your project. | . | These are typically due on Sundays and should not take very long to complete. | Methodology assignment 1 is due this Sunday. | . | Advice: come to the lecture help sessions to work on methodology assignments! We might even walk through them. | In addition, we will hold methodology-specific office hours; see the Office Hours page on the course website for the schedule. | . Summary: graded components . | Component | Weight | . | Participation questions | 5% | . | Overall participation | 5% | . | Quarter 1 Project | 70% (50% report, 20% code; checkpoint + final for each) | . | Quarter 2 Project Proposal | 15% | . | Methodology assignments | 5% | . Grading . | Assignments are graded by a combination of mentors and DSC 180A TAs. | Domain mentors will grade your reports. | Your reports should make it clear that your code is reasonably close to correct! | Domain mentors may give you feedback in office hours instead of through written feedback. | Their feedback will be from the standards of the domain! | . | DSC 180A TAs will grade your code and other assignments according to methodological standards taught in lecture. | All assignments graded as A/B/C/F only (i.e. 4/3/2/0 only, no plus/minus) using this rubric. | Your final grade is computed by the standard GPA conversion. | . Summary: meetings . | Discussion. | Required. | Need to complete tasks, readings, and participation questions before. | . | Lecture help sessions. | Held on Mondays. Optional and recorded. | Come for help with lecture (released the day before) and the associated methodology assignment. | . | Office hours. | Domain-specific office hours, hosted by mentors. | Methodology office hours, hosted by DSC 180A course staff. | Different questions go to different ‚Äúexperts.‚Äù | . | . Advice . | Work slow and steady. This material is hard and you will hit unexpected obstacles. | Ask questions! . | Access to a mentor like this is rare at UCSD! | Research is deceptively hard ‚Äì if you are confused, others likely are too. | Domains benefit from discussions and working together! | . | Don‚Äôt be afraid of redoing work. You will rewrite your code many times. | It doesn‚Äôt mean it was wrong the first time; it means you understand it in a different way. | . | . ## This week . ### Action items . | Read the Servers lesson that‚Äôs been posted on the course website. It‚Äôll show you how to access DSMLP, our campus computing cluster. | I‚Äôll stick around to answer any questions with it. | . | Complete Methodology Assignment 1 by Sunday. | Go to your first discussion section. | Submit your first participation assignment next week (i.e. 24 hours before your discussion section in Week 2). | . ",
    "url": "/lessons/q1/00/#syllabus-and-logistics",
    "relUrl": "/lessons/q1/00/#syllabus-and-logistics"
  },"86": {
    "doc": "Lesson 8 ‚Äì Examples",
    "title": "Lesson 8 ‚Äì Examples",
    "content": "All lectures will be delivered as readings that you complete on your own time. Post questions with the lesson here. Make sure to read this article before moving on to Methodology Assignment 5. There‚Äôs not much new content for this week. Instead, as you start to put together your Quarter 1 Project‚Äôs codebase, we wanted to remind you of this repository. The repo contains several examples of data science projects that follow best practices; each example is in a different branch. One example you should look at is Titanic Prediction. In particular: . | The script run.py shows how to implement various targets. In MA 5 and your final Quarter 1 Project submission, you‚Äôll need to implement the test target, which this particular example does not. | The data is pulled from an API that requires an API key. You‚Äôll note that the API key is not pushed to Git, and that‚Äôs because API keys generally are secrets that should not be shared with anyone else. For others to run the project from end-to-end, they‚Äôll need to generate their own API key and store it in a particular location. (If this applies to your project, you‚Äôll also implement a test target that will allow others to run your entire project without needing to create an API key.) | . ",
    "url": "/lessons/q1/08/#lesson-8--examples",
    "relUrl": "/lessons/q1/08/#lesson-8--examples"
  },"87": {
    "doc": "Lesson 8 ‚Äì Examples",
    "title": "Lesson 8 ‚Äì Examples",
    "content": " ",
    "url": "/lessons/q1/08/",
    "relUrl": "/lessons/q1/08/"
  },"88": {
    "doc": "Live Sesson ‚Äì Introduction to Introductions",
    "title": "Live Sesson ‚Äì Introduction to Introductions",
    "content": "In this live session, TA Praveen gave a talk on how to write titles, abstracts, and introductions. His presentation complements Lesson 3 and will be useful in writing your Quarter 1 Project Checkpoints. Slides . ",
    "url": "/lessons/q1/extra/intro-to-intros/",
    "relUrl": "/lessons/q1/extra/intro-to-intros/"
  },"89": {
    "doc": "üë®‚Äçüè´ Mentor Guide",
    "title": "üë®‚Äçüè´ Mentor Guide",
    "content": "Coming soon! . ",
    "url": "/mentors/",
    "relUrl": "/mentors/"
  },"90": {
    "doc": "üìÜ Office Hours",
    "title": "üìÜ Office Hours",
    "content": "Note: This page only contains the office hours schedule for methodology office hours. | To see the areas of expertise for each TA, and to see the TA assigned to your domain, check the üôã Staff page. | Ask your domain mentor for their office hours; they will not appear in this calendar. | . All office hours are held in-person. Suraj‚Äôs office hours are held in HDSI 349, and the TAs‚Äô office hours are held in HDSI 155. Remember that apart from on Monday, October 2nd, there are no live lectures for DSC 180A or DSC 180B. The only weekly meeting you must attend is the one with your mentor (the time of which you can see here). With that said, Suraj‚Äôs office hours overlap with the lecture times on WebReg, so all students should be able to attend at least one of them. If you‚Äôd like to meet with someone and can‚Äôt make it to their office hours, feel free to send them an email to schedule an appointment; emails can be found on the üôã Staff page. ",
    "url": "/office-hours/",
    "relUrl": "/office-hours/"
  },"91": {
    "doc": "üôã Participation (Quarter 1)",
    "title": "üôã Participation (Quarter 1)",
    "content": "Each week, at least 24 hours prior to meeting with your domain, you will submit a participation assignment. This submission serves the following purposes: . | It serves as a regular self-evaluation tool and place to gather your thoughts, so that you can address difficulties in a timely manner. The precision required of doing this in writing holds your critical assessment of your understanding to a higher bar. | It allows your domain mentor to structure discussion ahead of time, if they so choose. | . Note: As every domain is different, your mentor may choose to have you answer different questions than the ones below. This assignment is merely a default assignment. However, you should always be turning something in (with the exception of Week 1, when your mentor may not have assigned you any readings or tasks). Please turn in answers to the following questions to Gradescope. You must answer one Question 1, one Question 2, and one Question 3; you may pick and choose between the two categories below. If you were primarily assigned reading for the week, answer these three questions: . | Describe one thing you found interesting in the reading. Describe what it is in your own words and why you found it interesting. | Describe one thing that you found difficult to understand. Try to be specific about what you don‚Äôt think you understand. | In the reading, identify one choice that the author made in their investigation and your best guess at why they made that choice. For example, this may be a choice in sub-population to study, or a choice in parameter for a model. | . If you were primarily assigned a task for the week, answer these three questions: . | Describe one result you found interesting doing your task. Describe what it is in your own words and why you found it interesting. | Describe one thing your struggled with doing your task. Try to be specific about what is causing you difficulty and why. | In your work, identify one choice that you made in your investigation. Why did you make this choice? Were there other choices you could‚Äôve made that would be reasonable? For example, this may be a choice in sub-population to study, or a choice in parameter for a model. | . ",
    "url": "/assignments/participation/q1/",
    "relUrl": "/assignments/participation/q1/"
  },"92": {
    "doc": "1Ô∏è‚É£ Quarter 1 Project",
    "title": "1Ô∏è‚É£ Quarter 1 Project",
    "content": "The specifications of the Quarter 1 Project have been finalized. | The checkpoint is due on Sunday, October 30th at 11:59PM (at the end of Week 5). Checkpoint deliverables are marked with the Checkpoint label. | The whole project is due on Monday, December 5th at 11:59PM (at the end of Week 10). | . You will submit both the code and reports you generate for both the checkpoint and final submission to Gradescope. You should complete these tasks individually, unless directed otherwise by your mentor. If your mentor assigned you to groups: . | Each group member should submit a copy of the work to Gradescope individually. | As part of their report, each group member should include a paragraph stating what their role has been in the group project, both in terms of writing code and writing the report. | . ",
    "url": "/assignments/projects/q1/",
    "relUrl": "/assignments/projects/q1/"
  },"93": {
    "doc": "1Ô∏è‚É£ Quarter 1 Project",
    "title": "Table of contents",
    "content": ". | Introduction | Deliverables | Report | Code . | Code Submission Specifics | . | . ",
    "url": "/assignments/projects/q1/#table-of-contents",
    "relUrl": "/assignments/projects/q1/#table-of-contents"
  },"94": {
    "doc": "1Ô∏è‚É£ Quarter 1 Project",
    "title": "Introduction",
    "content": "This quarter, under the guidance of your mentor, you‚Äôre working through a central problem in your domain that introduces you to the area. Depending on your domain, your Quarter 1 Project will consist of either: . | A replication of a known result in a published paper. | An investigative paper, with a hands-on, data-driven inquiry into a relevant question in the area. | . By the end of the quarter, you will summarize the results of your work in a well-organized report that follows the norms of research papers in your domain. Your work will go beyond mere paraprhasing of the existing work that you study: . | Your domain may be taking a broader or narrower view than the work of any one paper. Your report will reflect the work you are doing, not the broader research that may be found in the work being studied. | You will likely be using data that differs from that used in the work you are studying. | Your conclusions may be different than the work you are studying. You should present the conclusions drawn from your data/methods and address any discrepancies with the work being studied. | The code supporting your work will conform to best practices in data science software development. | . ",
    "url": "/assignments/projects/q1/#introduction",
    "relUrl": "/assignments/projects/q1/#introduction"
  },"95": {
    "doc": "1Ô∏è‚É£ Quarter 1 Project",
    "title": "Deliverables",
    "content": "The Quarter 1 Project is due at the end of Week 10. There are two deliverables: . | A PDF submission of the report. This is graded by your domain mentor. | The code that generates the contents of your report. This is graded by methodology course staff. | . Checkpoint At the end of Week 5 (on October 30th), you‚Äôll have to submit a checkpoint. Your checkpoint submission will include: . | The title, abstract, and introduction sections of your report. See Methodology Lesson 3 for details on all three of these components. Note that your introduction itself will have three sections ‚Äì an introductory paragraph, a literature review and discussion of prior work, and a description of relevant data. | The code you‚Äôve produced so far. | . Intuitively, your checkpoint should contain a summary of the problem you are working on this quarter, with some context on why it‚Äôs interesting, along with anything your mentor wants you to include. ",
    "url": "/assignments/projects/q1/#deliverables",
    "relUrl": "/assignments/projects/q1/#deliverables"
  },"96": {
    "doc": "1Ô∏è‚É£ Quarter 1 Project",
    "title": "Report",
    "content": "The objectives for your report are described below. | By carefully explaining work in your area, you‚Äôll understand the area you‚Äôll be working in very well, down to the details. In particular, this process will allow you to understand how to draw a rigorous conclusion in your domain. | By emulating finished work in your domain, you‚Äôll learn how to effectively communicate technical ideas in your domain. | By using and critiquing existing methodologies and conclusions, you‚Äôll devise possible improvements to these methodologies that you can use in your Quarter 2 Project. | By working on the literature review, contained in the introduction section of your report, you‚Äôll create a foundation for your Quarter 2 Project. | By working on the report, you‚Äôll gain practice with using tools (such as LaTeX, Markdown, and Jupyter Notebooks) for producing such reports. | By writing code alongside your report, you‚Äôll develop a library of useful code that can be used in your Quarter 2 Project. | . ",
    "url": "/assignments/projects/q1/#report",
    "relUrl": "/assignments/projects/q1/#report"
  },"97": {
    "doc": "1Ô∏è‚É£ Quarter 1 Project",
    "title": "Code",
    "content": "The code in your Quarter 1 Project should conform to the best practices covered in methodology lectures. It should be: . | Runnable through a build script and targets, in any feasible environment, e.g. on DSMLP using a Docker image. | If your project is dependent on a specific platform, please inquire on EdStem, but project dependencies should be handled using best practices for that environment. | . | Thoughtfully organized, using reusable library code. | Tested software, implementing a test target. This either leverages test data you‚Äôve created (for data-driven projects) or unit and integration tests (for projects that create usable software). | . The Q1 code will be run similarly to Methodology Assignment 5. Code Submission Specifics . Note: The content below will likely not make sense until we cover Methodology Lectures 4 through 8. You can safely ignore this until then; it is not needed for your checkpoint submission. Turn your project repository into Gradescope. The root directory of your repository should include a submission.json file with two keys: . | \"dockerhub-id\", which maps to your Docker Hub repository. (The format should be &lt;user&gt;/&lt;image&gt;:&lt;tag&gt;. The default &lt;tag&gt; is latest if you don‚Äôt supply it). | \"build-script\", which maps to the command that needs to be run to build and run your project. | . { \"dockerhub-id\": \"&lt;user&gt;/&lt;image&gt;:&lt;tag&gt;\", \"build-script\": \"&lt;command&gt;\" } . Your submission will be run on DSMLP. | A container will be started using the command launch.sh -i &lt;user&gt;/&lt;image&gt;:&lt;tag&gt; using the Docker image information in submission.json. | Once in the container, the \"build-script\" command will be run. | . For example, a submission.json file might look like: . { \"dockerhub-id\": \"amfraenkel/fair-policing-project\", \"build-script\": \"python run.py\" } . And the following commands would be run on DSMLP: . | launch.sh -i amfraenkel/fair-policing-project | cp &lt;project&gt; . | cd &lt;project&gt; | python run.py test | . where &lt;project&gt; is the code that‚Äôs been turned into Gradescope. Note: This assignment should readily apply to all domains. | Data-centered domains start with collected data, that you will model your test data after. | Methods domains are building algorithms that take data as input. You should choose a data type that your algorithm may input and use that to model your test data. | . ",
    "url": "/assignments/projects/q1/#code",
    "relUrl": "/assignments/projects/q1/#code"
  },"98": {
    "doc": "Week 3 TA Check-In",
    "title": "Week 3 TA Check-In",
    "content": "In Week 3, your entire group is required to meet with your assigned TA. The Staff page contains a list of the domains assigned to each TA. By the time you attend your Week 3 check-in, you‚Äôll have been working on your project for over two weeks. The purpose of the check-in is to ensure that you‚Äôre making progress in the right direction, are not stuck anywhere, and are on track to meet the other checkpoint deadlines. At your check-in, discuss the following: . | A short summary of your project. | Your current status on the project, and what each group member is currently working on. | Any challenges you may be facing and any questions you have regarding organizing your code. | . This is different from your weekly domain meeting, in that this is more about making sure that your ideas and code are coming together coherently, rather than about specific implementation details. Specifically, you must: . | Go to this sheet to make an appointment with your TA. Make sure to sign up as a group, not individually. Email your TA if you cannot make any of their open slots. | 24 hours before your scheduled meeting, submit the following to this Gradescope assignment: . | The URL of your project‚Äôs GitHub repo. This must be public. | An abstract of your problem statement, i.e. a revised version of your proposal. You may copy this directly from your proposal submission, but be sure to update it ‚Äì the idea is to capture what has changed from your original proposal. (We expect things to change!) | The tasks you‚Äôve each completed so far. | The tasks you‚Äôre each currently working on, and any concerns/issues if any. | . | . ",
    "url": "/assignments/projects/q2-checkin/",
    "relUrl": "/assignments/projects/q2-checkin/"
  },"99": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project Proposal",
    "title": "üíç Quarter 2 Project Proposal",
    "content": "This document also takes the place of Methodology Lesson 7. You should read it before you complete Methodology Assignment 4, due on Sunday, November 13th. As you know, your main deliverable throughout the capstone sequence is your Quarter 2 Project. In order to ensure that you‚Äôll be able to successfully execute your project, you‚Äôre required to submit a detailed proposal. The proposal consists of three parts. The proposal is worth 15% of your DSC 180A grade; each component of the proposal is worth the same amount (5% of your DSC 180A grade). Below, we describe each component and its deliverables in more detail. All components are due on Monday, December 5th at 11:59PM to Gradescope. Groups . Quarter 2 Projects must be worked on in groups of 2-4. You must submit your proposal with the same group that you‚Äôll work on the project with. It is up to your mentor to determine how groups are formed; you should ask them how groups will be formed soon. Context . After this year, whether you work in industry or academia, you will often have to write project proposals. | As a data scientist in industry, you‚Äôll often have to write proposals to justify why your idea has value and is worth investigating. | In academia, to receive any sort of funding, you‚Äôll need to write a grant proposal, which reads similarly to a project proposal. | . As such, you are required to write a project proposal here, not just to better plan your Quarter 2 Project, but to gain this valuable skill. You must write a proposal even if your mentor has already determined what your Quarter 2 Project is going to be. | Written Proposal . | Description | Working in Groups | Ideation | Deliverables and Grading | . | Schedule . | Description | Frequently Asked Questions | Deliverables and Grading | . | Elevator Pitch . | Description | Tips | Deliverables and Grading | . | . ",
    "url": "/assignments/projects/q2-proposal/#-quarter-2-project-proposal",
    "relUrl": "/assignments/projects/q2-proposal/#-quarter-2-project-proposal"
  },"100": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project Proposal",
    "title": "Written Proposal",
    "content": "Description . The most important component of your proposal submission is a written proposal. Your written proposal should: . | State the problem being investigated, for both a general audience who knows nothing about your domain and a domain expert (like your mentor). | Give the reader enough context to convince them the problem is interesting and worth investigating ‚Äì if the project is executed, what will its impact be? | Provide enough detail for a domain expert to understand whether the project‚Äôs goals are realistic to complete using the methods described and in the timeframe allocated. | Specify the project‚Äôs primary output, e.g. a report/paper, a website, or an application. (Note that even if your primary output is a website, you will still have to write a paper, and vice versa.) | . Like the Introduction section of a paper, a written proposal should consist of three parts, that start broad and get increasingly narrower. (In fact, you will reuse a lot of your written proposal when writing your Quarter 2 Project‚Äôs introduction section.) Specifically, your written proposal should have three sections: . | A broad problem statement, with context to justify the investment in spending 10 weeks on the project. This should be accessible to anyone ‚Äì for instance, methodology staff, your family and friends, and hiring managers for the jobs you apply to should all be able to read this and understand what you are proposing and why it matters. | A narrow, careful problem statement for the domain expert. This section should discuss how these problems relate to the Quarter 1 Project in your domain. Has previous work attempted to answer these specific problems? If so, how did they fail? If not, why are these problems interesting? In what way does your investigation address a deficiency in the Quarter 1 Project? This section should be quite technical ‚Äì make sure to refer to specific methods. | A statement of the primary output (i.e., state whether you will create a report/paper, a website, or an application). If your project analyzes data, specify how you will communicate the analyses. If your project generates data, how will you analyze the data it produces? . | . In addition to the above structure, you need to justify why your project will be successful. In particular, if your project relies on data that was not used in the Quarter 1 Project, you need to prove the following: . | You can obtain the data. | The data contains the information needed. | The data is of sufficient quality. | . The easiest way to do this is to actually obtain the data while writing the proposal and perform some preliminary analyses to ensure it will actually be able to help you accomplish your goals. In years past, many groups fell in the trap of waiting until Quarter 2 to obtain their data, and by the time they realized that they either can‚Äôt obtain their data or that it won‚Äôt actually help them with their project, they had wasted a significant portion of the quarter. Don‚Äôt let this be you! . Working in Groups . Your proposal will form a contract for what you will work on in Quarter 2. You will have to work together and make decisions as a group, even if you may not fully agree with the choices. As you develop your proposal, consider the following: . | Try to agree on a general theme for what you want to investigate in your project. | You do not need to have 100% agreement on the proposal, rather you need to be sure that the proposed area of investigation is interesting to you. The specifics of a proposal change as you work on it, and you may have to change direction while working on the project itself anyway. | Discuss how your strengths might complement a teammate‚Äôs strengths. A proposal can consist of semi-independent pieces that fit individual team-member‚Äôs strengths ‚Äì for instance, one student can be responsible for building and designing an ML model, another can be responsible for a statistical investigation into the data generated by the ML model, and another can be responsible for developing custom visualizations of the results. All of these would be too much for a single person to do well in a quarter, but they are all achievable when working in a group. | . Ideation . As of the release of this assignment (Week 7), you may not be sure what to propose for Quarter 2. That‚Äôs totally fine. To help you get started, Methodology Assignment 4 will have you brainstorm ideas based on your current understanding of your domain. Your mentor will use your answers to encourage discussions about possible projects in Week 8. Note that the amount of freedom you have in proposing your own project will depend on your mentor. In fact, your mentor may already have determined what your Quarter 2 Project will be, and that‚Äôs fine. In any case, your mentor will play a crucial role in your proposal, as they‚Äôll be able to help you come up with a plan that you can realistically execute in 10 weeks under their guidance. Your final proposal submission should not surprise them at any point, because you should be discussing it with them regularly and incorporating their feedback. It‚Äôs also a good idea to look at the Archive to see what students were able to accomplish in Quarter 2 in years past. Deliverables and Grading . You‚Äôll submit your written proposal as a PDF to Gradescope as a group. Your mentor will grade it according to this rubric. ",
    "url": "/assignments/projects/q2-proposal/#written-proposal",
    "relUrl": "/assignments/projects/q2-proposal/#written-proposal"
  },"101": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project Proposal",
    "title": "Schedule",
    "content": "Description . You‚Äôll need to create a detailed plan of what you will do each week in order to execute your proposal and complete your Quarter 2 Project. Your proposed schedule should include: . | A 6 week schedule with tasks and goals to be accomplished each week. | A delineation of responsibilities among group members in the 6 week schedule. | . By writing your schedule now, it‚Äôll make it clear to both your group and your mentor whether your project can be realistically completed in the given timeframe. When creating your schedule, use your domain‚Äôs schedule and pace in Quarter 1 as a guide. What did you do each week? How much were you able to accomplish each week? . Note: . | Your schedules won‚Äôt be set in stone, as you will encounter hiccups along the way. However, by having a ‚Äúcontract‚Äù of who is going to do what, when, you‚Äôll be able to hold everyone in your group accountable and will be able to help them if and when they get stuck. | The amount of work you plan to do should scale with the size of your group. Groups of 4 should expect to accomplish more than a group of 2. It will be clear from your schedule whether your plan is too ambitious or not ambitious enough. | DSC 180B ‚Äì the capstone course you‚Äôll be enrolled in next quarter ‚Äì is a 4-unit course, meaning that you should expect to spend 12 hours per week on it on average. Plan for 11 of those hours should be spent on your project. Quality work takes time! | . Frequently Asked Questions . Why a 6 week schedule in a 10 week quarter? . As mentioned above, not everything will go according to plan and you will face setbacks. By planning to take 6 weeks instead of 10, you‚Äôll have some breathing room to deal with these setbacks. | Once you complete your tasks, you‚Äôll need to spend a lot of time polishing your work and making it presentable to a broad audience. Remember, you want to build something you‚Äôll look back on in years from now and be proud of, not something you just threw together at the last minute. | In the rare case that you finish everything you wanted to before the deadline, you‚Äôll surely be able to pose new questions and add more tasks. | . How specific should the tasks be? . As specific as possible. | Others in your group (and your mentor) should be able to tell exactly what you‚Äôre working on by reading a task description in your proposal. | The more specific the description, the better. One rule of thumb is that you should never have the same task listed across multiple weeks ‚Äì if you do, the task is not specific enough! Don‚Äôt just say ‚ÄúEDA.‚Äù | . How should we divide tasks up among group members? . Divide tasks so that they take advantage of the strengths of your group members and so that they can be parallelized. | Don‚Äôt divide tasks so far that you have no idea what your partners are working on and are unable to help them! | More details to come in the next Methodology Lesson. | . Deliverables and Grading . You‚Äôll submit your schedule as a PDF to Gradescope as a group. It will be separate from your written proposal PDF submission. Your mentor will grade it according to this rubric. ",
    "url": "/assignments/projects/q2-proposal/#schedule",
    "relUrl": "/assignments/projects/q2-proposal/#schedule"
  },"102": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project Proposal",
    "title": "Elevator Pitch",
    "content": "Description . Finally, you‚Äôll need to write and present an elevator pitch for your proposal. Your elevator pitch must be between 1 and 3 minutes long and should summarize the written proposal and its relevance for an audience that is not familiar with your domain. For instance, suppose you have a job interview in April and someone says ‚ÄúHey, I saw you did a capstone project. Tell me about it!‚Äù You‚Äôd give them your elevator pitch. Elevator pitches are purely verbal ‚Äì that is, they should not have any accompanying graphics. They should include few implementation details, and instead focus on the problem statement, context, and motivation. The typical anatomy of a short presentation is as follows: . | Context: What‚Äôs the background? Explain why this area is interesting. | Complication: Tell us what solutions currently exist to the problem at hand, and where the ‚Äúgaps‚Äù in current solutions are. | Question: Clearly state the question that addresses the problem. | Hypothesis: State your proposed solution. Propose a clear, quantifiable hypothesis that will advance our understanding. | . Unlike the other components of the proposal, pitches will be delivered individually! . Tips . Even though elevator pitches do not contain slides, it‚Äôs a good idea to use slides to help organize and prepare your pitch. Here‚Äôs one approach: . | Create 4-5 slides, each corresponding to a single idea (perhaps one slide for each of the four pieces above). | Each slide should contain a title that is a statement of an idea, and a single drawing or explanation. | Practice, practice, practice. When practicing: . | Talk through the ideas that each slide represent as if you‚Äôre explaining them to a listener. | Each time you practice, try to vary the way you explain each idea. | Over time, your reliance on the slides will decrease. However, do not write a script and memorize it; that‚Äôs not engaging. | Practice giving the pitch to members of your group. Let them interrupt you with questions. Can you adapt your pitch into a conversation if people ask you questions in the middle? If so, you have a strong pitch. | Stand up, speak slowly, and enunciate! | . | . Deliverables and Grading . You‚Äôll submit an individually recorded video of you presenting your elevator pitch to YouTube and submit a link to it on Gradescope. There should be no slides in the video, just your face talking. (Let Suraj know if you have any concerns with this requirement.) . Note that every member of your group will have to record separate videos, even if you write your pitches together and they are largely similar. We‚Äôve removed the previous Week 10 ‚Äúdry run‚Äù component of the pitch submission. However, you‚Äôre still encouraged to attend office hours in Week 10 to get feedback on your pitches. Unlike the written proposal and schedule, your elevator pitch will be graded by methodology TAs. Each of the six bullet points below are worth 1 point. | Between 1 and 3 minutes long and clear, and is not too rushed or too basic (style) | Not overly scripted, though reading off of notes a little is fine (style) | Introduces the problem area to a general audience (setup) | Explains why the area is interesting to a general audience (setup) | Describes the specific problem being approached (approach) | Describes how the problem will be approached and how to measure success (approach) | . To assign a grade to your elevator pitch, we‚Äôll use the following scheme: . | Letter Grade | Points | . | A | 5 - 6 | . | B | 3 - 4 | . | C | 1 - 2 | . | F | 0 | . ",
    "url": "/assignments/projects/q2-proposal/#elevator-pitch",
    "relUrl": "/assignments/projects/q2-proposal/#elevator-pitch"
  },"103": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project Proposal",
    "title": "2Ô∏è‚É£ Quarter 2 Project Proposal",
    "content": " ",
    "url": "/assignments/projects/q2-proposal/",
    "relUrl": "/assignments/projects/q2-proposal/"
  },"104": {
    "doc": "Week 8 TA Check-In",
    "title": "Week 8 TA Check-In",
    "content": "In Week 8 (between February 27th and March 3rd), your entire group is required to meet with your assigned TA for 20 minutes. The Staff page contains a list of the domains assigned to each TA. To sign up for a check-in, go to to this sheet. Make sure to sign up as a group, and only for your TA!Like the showcase, which is mandatory and in-person only, your Week 8 check-in with your TA is also mandatory and in-person only. If one of your group members must meet remotely, you must email both your TA and Suraj in advance of your check-in detailing the situation. Presentation . The primary goal of the Week 8 check-in is to gauge your preparedness to talk about your project at the in-person capstone showcase on March 15th. Firstly, you must come prepared with the latest version of your poster; it should be further along than the poster checkpoint you submitted on February 19th. Bring a laptop on which you can display your latest version. In addition, you must come prepared to talk about your project. As the Conversations section of Lesson 4 states, at the poster session, you must be prepared to have conversations with attendees who come from a range of backgrounds (from DSC 10 students to industry partners and faculty). To gauge your readiness, your TA will repeatedly select a random student in your group and ask them a question, such that the questions build off of one another. | The first question your TA will ask your group is, ‚ÄúSo, what‚Äôs your project about?‚Äù Your response should effectively be a two-minute elevator pitch summarizing your project and its impact. One group member will be randomly selected to give this elevator pitch; as such, everyone should be prepared to. | Then, your TA will repeatedly ask randomly-selected group members to answer followup questions. Each member in your group will be asked at least one question, and each member in your group must speak. | . To reiterate, all group members are expected to be present in-person, and all are expected to speak. If you do not appear at your check-in and don‚Äôt schedule a followup, you will lose half of your 10% checkpoint grade. Website . In addition to working through your presentation and poster, your TA will also give you feedback on your website, whose checkpoint is due on February 26th. You are expected to keep refining your website even after the checkpoint. ",
    "url": "/assignments/projects/q2-week8-checkin/",
    "relUrl": "/assignments/projects/q2-week8-checkin/"
  },"105": {
    "doc": "üôã Participation (Quarter 2)",
    "title": "üôã Participation (Quarter 2)",
    "content": "Note: If your domain mentor has their own specific instructions for this assignment, please defer to those. Otherwise, follow the instructions below. Each week before your domain meeting, your project group should meet separately to discuss your progress.* Then, as a group, 24 hours before discussion section, you should submit answers to the following prompts on Gradescope: . | Where and when did your group meet this past week? | What did each group member do the previous week? Did each member meet the goals set out in the schedule? Were there unexpected obstacles? Do you need help overcoming them? Be sure you explicitly list what each group member did in the previous week. | What will each group member do next week? Are any of these tasks new and/or unexpected? | Have you strayed away from the project proposal? If so, how and why? Include an updated schedule with any changes. (Note that we expect your project proposal to change over time.) | . To receive credit, you must write a 1-2 sentence response to each prompt, and include 1-2 sentences describing each group member‚Äôs specific contributions. Every group member should be informed about the status of the tasks of all other group members; these answers serve as an audit trail for the work attempted during the quarter. In section, one member will be chosen to give an update for their group. Take the opportunity in your domain meeting to discuss any difficulties and/or changes with your project with your mentor and the other groups in your domain. Not only will this help you resolve any issues, but it‚Äôll give you practice with communicating technical ideas. Towards the end of the quarter, each group member will be individually asked to state what percentage of the final deliverables each group member contributed to, e.g. one person may say A did 30%, B did 40%, and C did 30%, while another may say A did 40%, B did 40%, and C did 20%. We will use your group submissions to these weekly participation assignments to calibrate these percentages and use them to potentially adjust final grades at the end of the quarter. Remember, everyone should be contributing to the project equally. With that said, be honest and matter-of-fact about the contributions each member can make; sometimes life gets in the way. If this is the case, update your schedule with these constraints, and your participation check-ins will reflect the division of labor. Make sure that your group only makes one submission per week ‚Äì do not each make separate submissions! . *These meetings should not be the only time you communicate ‚Äì you should also have some form of asynchronous communication set up, whether that‚Äôs Slack, Discord, some other group chat, etc. ",
    "url": "/assignments/participation/q2/",
    "relUrl": "/assignments/participation/q2/"
  },"106": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project",
    "title": "2Ô∏è‚É£ Quarter 2 Project",
    "content": "You will have to produce four main deliverables for your Quarter 2 Project. Most deliverables also have an accompanying checkpoint, which serve to ensure that you‚Äôre on track to finish all components in time and to give you an opportunity to receive feedback from your mentor and methodology staff. Here, we outline what it is that you‚Äôll need to produce, and in the coming weeks, we‚Äôll provide additional guidance through the methodology lessons. For inspiration, you may want to look at the deliverables produced by past capstone students ‚Äì you can view all past capstone projects under the Archive tab of the course website. At the bottom of this page, we provide a few particular Examples of non-capstone data science projects you may also want to derive inspiration from. Some general notes: . | Refer to the course homepage for each deliverable‚Äôs exact deadline. Roughly speaking, you‚Äôll spend the first half of the quarter working on your project, and the second half preparing your deliverables and rehearsing your presentation. The two most pertinent dates are: . | Wednesday, March 15th, from 11AM-2:30PM, the in-person capstone showcase that all of your group members will have to present at. This will be attended by UCSD faculty and students, and HDSI industry partners. (Your project group will either be assigned to present in the 11AM-12:30PM block or the 1-2:30PM block; we won‚Äôt split groups into blocks until early February, so for now, make sure you‚Äôre free for the entire interval.) | Thursday, March 9th at 11:59PM, the deadline by which you must submit to us a PDF of the poster you will present at the capstone showcase. We are coordinating a bulk order with campus printing services and they may not be able to print your poster in time if we receive it any later than that. | . | All deliverables and checkpoints must be submitted as a group on Gradescope. As of now, the only component you will submit individually is a ‚Äúcontribution statement‚Äù towards the end of the quarter. | Each deliverable will be graded using the same A/B/C/F rubric from Quarter 1. Different group members can end up with different grades for the same work, depending on the answers to the weekly participation questions and the contribution statement. | . DSC 180B is a 4-unit course, which per campus rules means you should expect to spend 12 hours per week on it total. Remember that your goal in DSC 180B is to produce a capstone project you‚Äôll be proud to show others and look back at in the future, not just to receive an A. In addition to the four Checkpoints mentioned below, you‚Äôll also need to complete a mandatory Week 3 TA Check-In. ",
    "url": "/assignments/projects/q2/",
    "relUrl": "/assignments/projects/q2/"
  },"107": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project",
    "title": "Deliverables",
    "content": ". | Report | Code Artifact | Website | Poster Presentation | Examples | . ",
    "url": "/assignments/projects/q2/#deliverables",
    "relUrl": "/assignments/projects/q2/#deliverables"
  },"108": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project",
    "title": "Report",
    "content": "Your report should introduce and contextualize the problem you worked on, describe the methods used, state the results, and draw conclusions about the results. It should follow best practices in scientific writing, as laid out in Lesson 3 of Quarter 1. Note that if you‚Äôre building some sort of product, your report may look less like a traditional scientific paper and more like a ROI analysis of your product, and that‚Äôs fine ‚Äì just make sure that early on, you‚Äôre clear on what your mentor‚Äôs expectations of your report are. First piece:Don&#39;t merely fit some fancy model.Instead, make an argument about something real that is measured by data. Summarize your claim in a thesis statement, then support that statement with data analysis.We the reader want to care about what you are doing. help us! . &mdash; Karl Rohe (@karlrohe) November 16, 2022 A worthwhile Twitter thread to read. Checkpoint At the end of Week 5, you will submit a checkpoint of your report. This is an opportunity to get feedback from your domain mentor. For your checkpoint, submit a PDF containing a draft of your report, with: . | Headings for every section you plan to write (e.g. ‚ÄúIntroduction‚Äù, ‚ÄúMethods‚Äù, ‚ÄúResults‚Äù, ‚ÄúConclusion‚Äù, ‚ÄúAppendix‚Äù, ‚ÄúContributions‚Äù). This will make it easy to fill in the remaining sections later. | A complete title, abstract, and introduction. You can reuse most of this from earlier work ‚Äì say, your proposal or Quarter 1 Project report. | A mostly complete methods section ‚Äì you should know what your methods are at this point! | An appendix section at the end that includes a copy of your latest project proposal for reference. | A contributions section at the end that details the tasks that each group member was responsible for so far. | . Note that the figures in your report ‚Äì both now and in your final submission ‚Äì should not be created from screenshots: . | Tables should be imported from CSVs. | Plots should be saved programmatically (e.g. using plt.savefig) and imported (or converted from a notebook). | . When submitting your report, also edit this sheet to include your project‚Äôs title so that we can use it for marketing purposes if needed. Checkpoint: Week 5, graded by mentor Final: Week 10, graded by mentor . ",
    "url": "/assignments/projects/q2/#report",
    "relUrl": "/assignments/projects/q2/#report"
  },"109": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project",
    "title": "Code Artifact",
    "content": "Your code artifact is a public GitHub repository that contains all code for building/reproducing your project. It should follow best practices for data science software development, as discussed in Lessons 2, 5, and 6 from Quarter 1, to the extent possible. That is, it should be well-documented, buildable, and containerized ‚Äì don‚Äôt let this be you! . Your public GitHub repo should be updated incrementally and regularly to reflect your most recent work. Both at the checkpoint and at the end of the quarter, the commit history for your repo should show that each group member pushed code to the repo in regular intervals, not that all code was added right before the deadline ‚Äì that‚Äôll raise red flags üö©. In Lesson 2 of Quarter 2, we‚Äôll review the basics of collaboration with Git. Checkpoint At the end of Week 5, you will submit a checkpoint of your code artifact. This checkpoint will verify that your code: . | Is well documented and build instructions are found in README.md. | Is structured with best practices in your domain (and in Quarter 1 methodology, where applicable). | Contains a test target that tests the pipeline on test data, where applicable. | Runs in a Docker image on DSMLP. | . You will not submit your repository itself. Rather, you will submit an ‚Äúartifacts repo‚Äù in which there is a file that contains links to your project code, report, etc. See this post on Ed for more details. Then, on DSMLP, methodology staff will be able to run your project on test data by: . | Cloning your GitHub repository. | Launching a container with your Docker image. | Running python run.py test (or other build instructions specified in README.md). | . Checkpoint: Week 5, graded by methodology staff Final: Week 10, graded by methodology staff . ",
    "url": "/assignments/projects/q2/#code-artifact",
    "relUrl": "/assignments/projects/q2/#code-artifact"
  },"110": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project",
    "title": "Website",
    "content": "Refer to Quarter 2 Lesson 5 for tips and guidelines for websites. You will create a static website that serves as a public-facing version of your report. When creating your website, you may certainly borrow material from your report, but you should reduce the amount of material and make stylistic changes to make it appropriate for a general audience. After all, once you graduate, this website will be how most people learn about your project. Unless you ask the methodology instructor for permission otherwise, your website should be hosted on GitHub Pages. (To get a sense of the types of websites students created in the past, you may want to refer to the Archive.) . In some special cases, your group may be working on developing a ‚Äúproduct‚Äù, like a dashboard, an application, or some sort of service. If that‚Äôs the case, you will create and submit both: . | Your actual product. | A separate, static website that explains your project, according to the guidelines above. This is the way most people will acquaint themselves with your project. You should include a prominent link to your interactive webpage from your static page. | . Primary vs. Secondary Deliverables If your project is a traditional methods or analysis project, your primary deliverable is your report and your secondary deliverable is your website. If your project is building a product (e.g. an application or dashboard), your primary deliverable is your product itself and your secondary deliverable is your report, though as mentioned above, you must still produce a static webpage, and it is that webpage that you should submit a checkpoint for. Checkpoint At the end of Week 7, you will submit a checkpoint of your static website. All that‚Äôs required for the checkpoint is that you set up the skeleton/outline of your project webpage. It should contain titles and headers, but doesn‚Äôt need to contain content ‚Äì all we need to see is that you put thought into how your webpage is organized. To submit the checkpoint, you‚Äôll submit a link to the repository containing the code to your website (not the link to your website itself). The README.md in that code repository should contain a link to the website itself, which we can use to visit your page. Checkpoint: Week 7, graded by methodology staff Final: Week 10, graded by methodology staff . ",
    "url": "/assignments/projects/q2/#website",
    "relUrl": "/assignments/projects/q2/#website"
  },"111": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project",
    "title": "Poster Presentation",
    "content": "Refer to Quarter 2 Lesson 4 for tips and guidelines for websites. Finally, you will present your project at the in-person capstone showcase. To do so, you will prepare a physical poster that contains a graphical summary of your work, that you can use as a springboard for conversations about your work with attendees. These attendees will come from a variety of backgrounds, from data science first-years to research faculty and industry mentors. From the UC Davis Undergraduate Research Center: . At a poster session, your ultimate goal is to share the story of your work with as many people as possible. This will give you the opportunity to network with people that may be future advisers, employers, or collaborators and you can receive important feedback on your work. To bring people in, your poster should communicate the topic quickly and include visual elements such as pictures, graphs, maps and diagrams as well as text. At its core, an effective poster is centered on a concise and powerful story. With the help of visuals, the presenter can share the story of the work in just five minutes. In Lesson 4 of Quarter 2, we will cover a few more details about how to create academic posters. However, for posters in particular, you should rely on your mentor for guidance, as they‚Äôve almost certainly created posters before. Note that we will print your poster for you (and pay for the costs), as long as you submit your poster PDF by the deadline (March 9th). From Quarter 2 Lesson 4: . On March 9th, you will submit your poster to us as a PDF of size 48‚Äù x 36‚Äù. Make sure that all text and figures on your poster are large and legible ‚Äì to do this, ensure that your figures are exported at a resolution of 300 DPI (dots per inch). See here for some guidelines. Checkpoint There are two separate checkpoints for the poster presentation: . | At the end of Week 6, you will submit a draft of your poster as a PDF. Your mentor will provide feedback on this draft. More details to come. | In Week 8, you will make an appointment with your TA to practice giving presentations about your project using your poster. Signups will be released in Week 7. | . At the capstone showcase itself, your TA will come to your table and grade your final presentation, while your mentor will grade your final poster. See this post on Ed for the rubric TAs will use to grade your oral presentation at the showcase. Poster Checkpoint: Week 6, graded by mentor Oral Presentation Checkpoint: Week 8, graded by methodology staff Final: Week 10, graded by mentor (poster) and methodology staff (oral presentation) . Submit your final poster PDF (due March 9th at 11:59PM) here. ",
    "url": "/assignments/projects/q2/#poster-presentation",
    "relUrl": "/assignments/projects/q2/#poster-presentation"
  },"112": {
    "doc": "2Ô∏è‚É£ Quarter 2 Project",
    "title": "Examples",
    "content": "Below, we provide examples of non-capstone data science projects. Pay close attention to how they‚Äôve chosen to separate their website, report, and code. | Topic | Components | . | FACT Diagnostic: How to Better Understand Trade-offs Involving Group Fairness | Website explains the paper‚Äôs main pointsPaper contains the main results and proofs of correctnessCode reproduces the project and provides a usable tool | . | A New Model To Scale Up Forest Restoration From Sites To Landscapes | Website intended for general audience (with an interactive visualization)Paper contains scientific investigationCode reproduces project | . | recount2: A multi-experiment resource of analysis-ready RNA-seq gene and exon count datasets | Website makes datasets (output of project) availablePaper justifies and demonstrates the projectCode contains source code for the tool | . | kallisto | Website introduces and contextualizes the softwarePaper describes usefulness and correctness of methodCode contains source code for the tool | . | VoytekLab, a lab with multiple projects | Website contains introduction to the problems approached by the labPapers contain the details of the resultsCode lists source for both tools/libraries and for reproducing papers | . | LightGBM | Website briefly introduces project and contributorsPaper describes correctness of algorithmCode contains library for algorithm usage | . ",
    "url": "/assignments/projects/q2/#examples",
    "relUrl": "/assignments/projects/q2/#examples"
  },"113": {
    "doc": "üìñ Resources",
    "title": "üìñ Resources",
    "content": ". ",
    "url": "/resources/",
    "relUrl": "/resources/"
  },"114": {
    "doc": "üìñ Resources",
    "title": "Table of contents",
    "content": ". | Computing Resources | . ",
    "url": "/resources/#table-of-contents",
    "relUrl": "/resources/#table-of-contents"
  },"115": {
    "doc": "üìñ Resources",
    "title": "Computing Resources",
    "content": ". | Command-line cheat sheet . | Bash cheat sheets: educative.io, devhints.io. | . | DSMLP documentation . | Accessing section-specific data | Launching containers | To view the amount of disk space you have left, navigate here. At the /hub/spawn page, select the Services Tab &gt; ‚Äúdisk-quota-service‚Äù. | Use launch-scipy-ml.sh -h to see all launch options. | By default, you can only request 1 GPU (with -g 1). To request more, in addition to using -g n (where n is some integer between 2 and 8), use -p low to specify that your request is low priority. For instance, launch-scipy-ml.sh -g 4 -p low. | Visit here to see which pods and GPUs are currently free. | . | Setting up SSH keys | Git on the command line . | Personal access tokens . | You may also want to read this guide written by current student and DSC 30 tutor Scott Yang | . | SSH Keys for GitHub | . | UCSD VPN | . Have a resource that we should add to this page? Let us know! . ",
    "url": "/resources/#computing-resources",
    "relUrl": "/resources/#computing-resources"
  },"116": {
    "doc": "Accessing section-specific data",
    "title": "Accessing section-specific data",
    "content": "Some mentors have coordinated with the methodology staff and DSMLP to provide only the students in their section access to data on DSMLP. This data lives in section-specific folders that only the students in their section have access to. Here‚Äôs how to launch a server on DSMLP in a way that you can access this section-specific data. For the purposes of this example, we will assume you want to use the vanilla launch-scipy-ml.sh launch script, but these steps work with any launch script and flags. Also, note that here ‚Äúteam‚Äù and ‚Äúsection‚Äù mean the same thing; by ‚Äúteam‚Äù we don‚Äôt mean your project‚Äôs team. | ssh onto DSMLP as usual. Don‚Äôt run any launch scripts yet. | Run launch-scipy-ml.sh -W DSC180A_FA22_A00 -G list. Note that this won‚Äôt actually launch a server ‚Äì instead, this will list all of the groups you are a part of. You should see a row that contains your capstone section number for the ‚ÄúTeam,‚Äù like DSC 180A - A14 [88137] in the example below. Copy the ‚ÄúTeam ID‚Äù (dsc180aa1488137100014352 in the example below). | . Note: If you don‚Äôt see the right team information at this step, contact Suraj. | Run launch-scipy-ml.sh -W DSC180A_FA22_A00 -G &lt;teamid&gt;, with &lt;teamid&gt; replaced with the Team ID you copied earlier. If you‚Äôre in section A14 like in the example above, you‚Äôd run launch-scipy-ml.sh -W DSC180A_FA22_A00 -G dsc180aa1488137100014352. | After your server launches, run ls. You should see three folders ‚Äì private, public, and teams. Your home directory is in private (that‚Äôs where all your code should live). The public folder contains files that the methodology course staff may share with the entire course. | To find your section-specific data, cd into teams. Run ls to see a list of all of the teams in the course and identify the name of yours. This may look like the example below. If, again, you‚Äôre in section A14, your team-specific folder is \"dsc-180a---a14-[88137]\" (the quotes are important). If you cd into that folder, you‚Äôll see the files that your mentor uploaded for you! . | . All you need to do now is access the data in your team‚Äôs folder from your code in the private folder! For instance, from a script at the root of your private folder, a path to a file in your team‚Äôs folder might be \"../teams/dsc-180a---a14-[88137]/example.txt\". ",
    "url": "/section-specific/",
    "relUrl": "/section-specific/"
  },"117": {
    "doc": "üôã Staff",
    "title": "üôã Staff",
    "content": "See the Office Hours page for the office hours schedule. If you‚Äôd like to meet with someone and can‚Äôt make it to their office hours, feel free to send them an email to schedule an appointment. ",
    "url": "/staff/",
    "relUrl": "/staff/"
  },"118": {
    "doc": "üôã Staff",
    "title": "Coordinator and Methodology Instructor",
    "content": ". Suraj Rampure he/him . rampure@ucsd.edu . Academic Background and Expertise . üßë‚Äçüè´ Lecturer, Halƒ±cƒ±oƒülu Data Science Institute . üéì MS, Electrical Engineering and Computer Sciences, UC Berkeley . Personal Life . üè† Windsor, Ontario, Canada . üôã Credit card points and traveling, my dog back home, the Lakers, my academic journey, and this . üçú Menya Ultra, Tacos El Gordo, DJK, Charminar, Koon Thai, Bangkok Bay, SomiSomi . ",
    "url": "/staff/#coordinator-and-methodology-instructor",
    "relUrl": "/staff/#coordinator-and-methodology-instructor"
  },"119": {
    "doc": "üôã Staff",
    "title": "Teaching Assistants",
    "content": ". Keng-Chi Chang he/him X15, Z25 . kechang@ucsd.edu . Academic Background and Expertise . üßë‚Äçüè´ 5th year PhD student, Political Science + 1st year MS Student, Computer Science &amp; Engineering . üéì idk . üí≠ Online behavior on social media, computational social science, and political internet memes . üß† Anything social science related (misinformation, social media, ethics, spatial, finance, health), R, social data collection, data visualization, causal inference, NLP, time series, spatial data, Python . Personal Life . üè† Taipei, Taiwan . üôã Tea and boba üßã, Rimac or enjoying independent films . üçï idk . Praveen Nair he/him . prnair@ucsd.edu . Academic Background and Expertise . üßë‚Äçüè´ . üéì . Personal Life . üè† . üôã . Samanvitha Sateesha she/her . ssateesha@ucsd.edu . Academic Background and Expertise . üßë‚Äçüè´ . üéì . Personal Life . üè† . üôã . Yuyao Wang she/her . yuw079@ucsd.edu . Academic Background and Expertise . üßë‚Äçüè´ . üéì . Personal Life . üè† . üôã . ",
    "url": "/staff/#teaching-assistants",
    "relUrl": "/staff/#teaching-assistants"
  },"120": {
    "doc": "üßê Student FAQ",
    "title": "üßê Student FAQ",
    "content": ". ",
    "url": "/student-faq/",
    "relUrl": "/student-faq/"
  },"121": {
    "doc": "üßê Student FAQ",
    "title": "Table of contents",
    "content": ". | How do I know what projects will look like in a domain? | What should I consider when deciding on a domain? | What if I can‚Äôt sign up for my prefered domain? | What should I consider when choosing a domain (mentor)? | List of domains by section | . Will show this page in Spring 2023, when prospective students are enrolling. How do I know what projects will look like in a domain? . The domains we‚Äôve listed (click the link in the top right corner of the page) vary specificity; different mentors may have different visions for how much flexibility those in their domain have in determining their project. When you choose an employer after graduation, the precise nature of your work will be unknown, and may change depending on the circumstances. Generally, your choice depend on your compatibility with the general area in question. Take the same perspective here; you won‚Äôt know precisely the topic, only the general area. If you would like to know more about a specific area, look up the mentor‚Äôs research page or take a look at previous Capstone projects they have mentored, if any (the üíæ Archive page is good for this). What should I consider when deciding on a domain? . When considering domains of study, you should consider: . | Whether you prefer a class focused on methods, systems, or an applied domain. | Whether any specialized knowledge will be highly leveraged in the domain. While all domains are open to all students who meet the prerequisites, the process of ‚Äúgetting up-to-speed‚Äù in the domain during Quarter 1 will require more work if you have no exposure to the specialized knowledge. | . Beyond that, really all domains cover interesting questions that offer a great opportunity for two quarters of research! . What if I can‚Äôt sign up for my prefered domain? . Being a data scientist requires getting up to speed in an area you may not know. Really, any of these areas are quite interesting, once you get into the problem! Please be open-minded about your area of choice üòä; remember that in whatever domain you end up in, you will be bringing your strong quantitative skillset. Furthermore, not everyone realized that the problems that may seem mundane are often more interesting, more realistic to ‚Äòreal-world‚Äô problems a data scientist might tackle, and yield more interesting results. A project on a trendy topic runs the risk of coming across like a cursory data science blog, as oppossed to the mature project this has the potential to be. What should I consider when choosing a domain (mentor)? . When considering potential domain mentors, be aware that they will be acting in very different capacities than a course instructor. Here are a few points to consider: . | The biggest factor in a successful project is personalized attention and a small class. You should prefer to enroll in domains with smaller enrollment, even if the you think you might like a different mentor/subject more. | The skillset required for mentoring relies more on expertise in an area and less on the track record of an course instructor. | You mentor may be a source of letters of recommendation in the future. As such, research faculty leading small sections give you the best opportunity for future opportunities! | . List of domains by section . For a listing of current domains, click the first link in the top right corner of this site. ",
    "url": "/student-faq/#table-of-contents",
    "relUrl": "/student-faq/#table-of-contents"
  },"122": {
    "doc": "üìì Syllabus",
    "title": "üìì Syllabus",
    "content": ". ",
    "url": "/syllabus/",
    "relUrl": "/syllabus/"
  },"123": {
    "doc": "üìì Syllabus",
    "title": "Table of contents",
    "content": ". Coming soon! . ",
    "url": "/syllabus/#table-of-contents",
    "relUrl": "/syllabus/#table-of-contents"
  }
}
